{"version":3,"sources":["views/Introduction.js","utils/index.js","components/charts/Bar.jsx","components/charts/SmallChart.jsx","components/charts/HorizontalBar.jsx","components/charts/Rose.jsx","components/charts/ScatterChart.jsx","components/charts/map/Map.jsx","components/charts/TripDurationChart.jsx","views/Citybike.jsx","components/general/Sider.js","Router.js","serviceWorker.js","index.js"],"names":["columns","title","dataIndex","key","tableData","name","type","option","description","listData","linkedin","github","email","Title","Text","Introduction","bordered","style","textAlign","orientation","size","dataSource","renderItem","item","Item","actions","href","Meta","marginTop","pagination","pageSize","deleteLargeTrips","data","minuts","newData","forEach","element","parseInt","tripduration","push","getAmmountByDay","dictDay","results","nameObj","record","time","Date","starttime","day","getDate","undefined","typeDay","getDay","value","avergayByDayOfWeek","totals","result","count","total","nameDay","number","getPlaces","places","dictEdges","place","coord","lat","long","input","output","nameStart","nameEnd","startCoord","endCoord","name0","edges","names","split","startValue","startDuration","endValue","endDuration","startName","endName","startToEnd","endToStart","startToEndDuration","endToStartDuration","placeArray","i","namePlace","centroid","formatArray","currentStation","obj","objCp","countByAge","startStation","endStation","dictAge","arrayAge","currentYear","getFullYear","year","countGender","male","female","und","gender","scale","colors","Bar","setNumberDay","React","useState","mounted","setMounted","useEffect","height","padding","forceFit","onClick","e","console","log","element-highlight","position","color","label","val","tooltip","Demo","Fragment","autoFit","Stacked","dv","DataSet","createView","source","this","props","transform","callback","a","b","fields","retains","dt","length","rows","shared","transpose","offset","adjust","marginRatio","Component","Rose","filter","visible","showTitle","lineWidth","stroke","Scatter","dataProp","newDataSourceTarget","target","ammount","parseFloat","toFixed","st","ts","scatterFormat","interactions","shape","fill","fillOpacity","items","minWidth","strong","MapScene","lines","edgeFilterProp","setCurrentStation","searchedStation","popupInfoLine","setPopupInfoLine","popupInfo","setPopupInfo","filterLine","setFilterLine","allLines","setAllLines","layer","setLayer","scene","setScene","setSelect","getEncodedData","coordinates","setZoomAndCenter","map","center","pitch","zoom","top","left","right","bottom","lnglat","feature","margin","blend","parser","field","values","start","end","active","opacity","animate","enable","trailLength","interval","duration","handler","args","lngLat","onLayerLoaded","options","confirmedCount","select","Basic","row","tripSourceTarget","tripTargetSource","ds","Citibike","month","setMonth","setData","ammountsByDay","setAmmount","average","setAverage","currentDay","setCurrentDay","dataMap","setDataMap","numberDay","edgesFilter","setEdgesFilter","setsearchedStation","genders","setGenders","ages","setAges","chooseDay","filterData","filterByDay","data0","span","width","defaultValue","onChange","Option","accept","showUploadList","beforeUpload","file","reader","FileReader","onload","JSON","parse","dataFile","message","success","readAsText","icon","UploadOutlined","gutter","maxHeight","suffix","minHeight","SmallChart","allowClear","placeholder","showSearch","filterOption","children","toLowerCase","indexOf","Object","keys","bodyStyle","TripDurationChart","HorizontalBar","Sider","customSider","collapsed","trigger","collapsible","className","theme","mode","defaultSelectedKeys","to","UserOutlined","DashboardTwoTone","Header","Content","Routes","setCollapsed","basename","process","createElement","MenuUnfoldOutlined","MenuFoldOutlined","exact","path","component","Citybike","Boolean","window","location","hostname","match","ReactDOM","render","Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"o4nzPAIMA,EAAU,CACd,CAAEC,MAAO,SAAUC,UAAW,OAAQC,IAAK,QAC3C,CAAEF,MAAO,OAAQC,UAAW,OAAQC,IAAK,QACzC,CAAEF,MAAO,WAAYC,UAAW,SAAUC,IAAK,UAC/C,CAAEF,MAAO,iBAAeC,UAAW,cAAeC,IAAK,gBAGnDC,EAAY,CAChB,CACED,IAAK,EACLE,KAAM,eACNC,KAAM,UACNC,OAAQ,QACRC,YAAa,oCAEf,CACEL,IAAK,EACLE,KAAM,YACNC,KAAM,OACNC,OAAQ,QACRC,YAAa,qCAEf,CACEL,IAAK,EACLE,KAAM,WACNC,KAAM,OACNC,OAAQ,QACRC,YAAa,kCAEf,CACEL,IAAK,EACLE,KAAM,mBACNC,KAAM,UACNC,OAAQ,QACRC,YAAa,kCAEf,CACEL,IAAK,EACLE,KAAM,qBACNC,KAAM,SACNC,OAAQ,QACRC,YAAa,sCAEf,CACEL,IAAK,EACLE,KAAM,yBACNC,KAAM,QACNC,OAAQ,QACRC,YAAa,uCAEf,CACEL,IAAK,EACLE,KAAM,0BACNC,KAAM,QACNC,OAAQ,QACRC,YAAa,wCAhDC,CAmDhB,CACEL,IAAK,EACLE,KAAM,iBACNC,KAAM,UACNC,OAAQ,QACRC,YAAa,kCAEf,CACEL,IAAK,EACLE,KAAM,mBACNC,KAAM,SACNC,OAAQ,QACRC,YAAa,sCAEf,CACEL,IAAK,GACLE,KAAM,uBACNC,KAAM,QACNC,OAAQ,QACRC,YAAa,uCAEf,CACEL,IAAK,GACLE,KAAM,wBACNC,KAAM,QACNC,OAAQ,QACRC,YAAa,wCAEf,CACEL,IAAK,GACLE,KAAM,SACNC,KAAM,UACNC,OAAQ,OACRC,YAAa,kBAEf,CACEL,IAAK,GACLE,KAAM,WACNC,KAAM,SACNC,OAAQ,OACRC,YAAa,mBAEf,CACEL,IAAK,GACLE,KAAM,aACNC,KAAM,UACNC,OAAQ,OACRC,YAAa,oCAEf,CACEL,IAAK,GACLE,KAAM,SACNC,KAAM,SACNC,OAAQ,OACRC,YAAa,gBAMXC,EAAW,CACf,CACEJ,KAAM,yBACNK,SAAU,kEACVC,OAAQ,gCACRC,MAAO,yBAET,CACEP,KAAM,wCACNK,SAAU,4BACVC,OAAQ,8BACRC,MAAO,wBAET,CACEP,KAAM,sBACNK,SAAU,4BACVC,OAAQ,8BACRC,MAAO,yBAGHC,E,IAAAA,MAAOC,E,IAAAA,KA6CAC,EA3CM,WACnB,OACE,uBAAMC,UAAU,EAAOC,MAAO,CAAEC,UAAW,WACzC,kBAACL,EAAD,+CAEA,uBAASM,YAAY,QAArB,gBAEA,uBACEC,KAAK,QAELC,WAAYZ,EACZa,WAAY,SAACC,GAAD,OACV,sBAAMC,KAAN,CACEC,QAAS,CACP,uBAAGC,KAAMH,EAAKb,UAAd,aACA,uBAAGgB,KAAMH,EAAKZ,QAAd,YAGF,yBAAKM,MAAO,CAAEC,UAAW,SACvB,sBAAMM,KAAKG,KAAX,CAAgB1B,MAAOsB,EAAKlB,KAAMG,YAAae,EAAKX,aAM5D,uBAASO,YAAY,QAArB,mBACA,kBAACL,EAAD,0FAEmB,IACjB,uBAAGY,KAAK,2CAAR,YAHF,uEAI+D,IAC7D,uBAAGA,KAAK,yEAAR,WAEK,IAPP,+DAUA,yBAAKT,MAAO,CAAEW,UAAW,OACvB,uBAAOR,KAAK,QAAQC,WAAYjB,EAAWJ,QAASA,EAAS6B,WAAY,CAACC,SAAU,S,4ICpLrF,SAASC,EAAiBC,GAAqB,IAAfC,EAAc,uDAAL,IAC1CC,EAAU,GAMd,OALAF,EAAKG,SAAQ,SAAAC,GACRC,SAASD,EAAQE,cAAc,GAAML,GACtCC,EAAQK,KAAKH,MAGVF,EAEF,SAASM,EAAgBR,GAE9B,IAAIS,EAAU,GACVC,EAAU,GAWd,IAAK,IAAIC,KAVTX,EAAKG,SAAQ,SAACS,GACZ,IAAMC,EAAO,IAAIC,KAAKF,EAAOG,WACvBC,EAAMH,EAAKI,UACjB,QAAqBC,IAAjBT,EAAQO,GAAoB,CAC9B,IAAMG,EAAUN,EAAKO,SACrBX,EAAQO,GAAO,CAAEK,MAAO,EAAG/C,KAAM6C,QAEjCV,EAAQO,GAAR,eAAoBP,EAAQO,GAA5B,CAAkCK,MAAOZ,EAAQO,GAAKK,MAAQ,OAG9CZ,EAClBC,EAAQH,KAAK,CACXS,IAAKL,EACLU,MAAOZ,EAAQE,GAASU,MACxB/C,KAAMmC,EAAQE,GAASrC,OAG3B,OAAOoC,EAGF,SAASY,EAAmBtB,GAIjC,IAAIuB,EAAS,GACTC,EAAS,GAWb,IAAK,IAAIb,KAVTX,EAAKG,SAAQ,SAACC,QACiBc,IAAzBK,EAAOnB,EAAQ9B,MACjBiD,EAAOnB,EAAQ9B,MAAQ,CAAEmD,MAAO,EAAGC,MAAOtB,EAAQiB,OAElDE,EAAOnB,EAAQ9B,MAAQ,CACrBmD,MAAOF,EAAOnB,EAAQ9B,MAAMmD,MAAQ,EACpCC,MAAOH,EAAOnB,EAAQ9B,MAAMoD,MAAQtB,EAAQiB,UAI9BE,EAAQ,CAC1B,IAAMI,EACQ,MAAZhB,EACI,IACY,MAAZA,EACA,IACY,MAAZA,EACA,IACY,MAAZA,EACA,IACY,MAAZA,EACA,IACY,MAAZA,EACA,IACA,IACNa,EAAOjB,KAAK,CACVlC,KAAMsD,EACNN,MAAOE,EAAOZ,GAASe,MAAQH,EAAOZ,GAASc,MAC/CG,OAAQjB,IAGZ,OAAOa,EAEF,SAASK,EAAU7B,GAIxB,IAAI8B,EAAS,GAETC,EAAY,GAGhB/B,EAAKG,SAAQ,SAACS,GACZ,IAAMoB,EAAQpB,EAAO,sBACrB,QAAsBM,IAAlBY,EAAOE,GAAsB,CAC/B,IAAMC,EAAQ,CACZC,IAAKtB,EAAO,0BACZuB,KAAMvB,EAAO,4BAEfkB,EAAOE,GAAS,CAAEC,MAAM,eAAMA,GAASG,MAAO,EAAGC,OAAQ,QAEzDP,EAAOE,GAAP,eAAqBF,EAAOE,GAA5B,CAAoCI,MAAON,EAAOE,GAAOI,MAAQ,OAGrEpC,EAAKG,SAAQ,SAACS,GACZ,IAAMoB,EAAQpB,EAAO,oBACrB,QAAsBM,IAAlBY,EAAOE,GAAsB,CAC/B,IAAMC,EAAQ,CACZC,IAAKtB,EAAO,wBACZuB,KAAMvB,EAAO,0BAEfkB,EAAOE,GAAS,CAAEC,MAAM,eAAMA,GAASI,OAAQ,EAAGD,MAAO,QAEzDN,EAAOE,GAAP,eAAqBF,EAAOE,GAA5B,CAAoCK,OAAQP,EAAOE,GAAOK,OAAS,OAIvErC,EAAKG,SAAQ,SAACS,GAEZ,IAAM0B,EAAY1B,EAAO,sBACnB2B,EAAU3B,EAAO,oBACjBN,EAAeD,SAASO,EAAM,cAC9B4B,EAAa,CACjBN,IAAKtB,EAAO,0BACZuB,KAAMvB,EAAO,4BAET6B,EAAW,CACfP,IAAKtB,EAAO,wBACZuB,KAAMvB,EAAO,0BAET8B,EAAK,UAAMJ,EAAN,YAAmBC,QACLrB,IAArBa,EAAUW,GACZX,EAAUW,GAAS,CACjBrB,MAAO,EACPmB,WAAYA,EACZC,SAAUA,EACVnC,aAAcA,GAGhByB,EAAUW,GAAV,eACKX,EAAUW,GADf,CAEErB,MAAOU,EAAUW,GAAOrB,MAAQ,EAChCf,aAAcyB,EAAUW,GAAOpC,aAAeA,OAqBpD,IAAIqC,EAAQ,GACZ,IAAK,IAAIhC,KAAWoB,EAAW,CAC7B,IAAMa,EAAQjC,EAAQkC,MAAM,KACtBL,EAAaT,EAAU,GAAD,OAAIa,EAAM,GAAV,YAAgBA,EAAM,KAAMJ,WAClDC,EAAWV,EAAU,GAAD,OAAIa,EAAM,GAAV,YAAgBA,EAAM,KAAMH,SAChDK,EAAaf,EAAU,GAAD,OAAIa,EAAM,GAAV,YAAgBA,EAAM,KAAMvB,MAClD0B,EAAgBhB,EAAU,GAAD,OAAIa,EAAM,GAAV,YAAgBA,EAAM,KAAMtC,aACrD0C,OACqC9B,IAAzCa,EAAU,GAAD,OAAIa,EAAM,GAAV,YAAgBA,EAAM,KAC3B,EACAb,EAAU,GAAD,OAAIa,EAAM,GAAV,YAAgBA,EAAM,KAAMvB,MACrC4B,OACqC/B,IAAzCa,EAAU,GAAD,OAAIa,EAAM,GAAV,YAAgBA,EAAM,KAC3B,EACAb,EAAU,GAAD,OAAIa,EAAM,GAAV,YAAgBA,EAAM,KAAMtC,aAC3CqC,EAAMpC,KAAK,CACT0B,MAAO,CACL,CAACO,EAAWL,KAAMK,EAAWN,KAC7B,CAACO,EAASN,KAAMM,EAASP,MAE3BgB,UAAWN,EAAM,GACjBO,QAASP,EAAM,GACfQ,WAAYN,EACZO,WAAYL,EACZM,mBAAoBP,EACpBQ,mBAAoBN,IAIxB,IAAIO,EAAa,GACbC,EAAI,EACR,IAAK,IAAIC,KAAa5B,EAAQ,CAC5B,IAAMI,EAAMJ,EAAO4B,GAAWzB,MAAMC,IAC9BC,EAAOL,EAAO4B,GAAWzB,MAAME,KAC/BC,EAAQN,EAAO4B,GAAWtB,MAC1BC,EAASP,EAAO4B,GAAWrB,OACjCmB,EAAWjD,KAAK,CACdlC,KAAMqF,EACNvF,IAAKsF,EACLE,SAAU,CAAQ,EAAPxB,EAAgB,EAAND,GACrBE,MAAOA,EACPC,OAAQA,IAEVoB,IAEF,MAAO,CAAED,aAAYb,SAGhB,SAASiB,EAAY5D,EAAM6D,GAEhC,IAAI3D,EAAU,GAgBd,OAfAF,EAAKG,SAAQ,SAAC2D,GACZ,IAAMC,EAAK,eAAQD,UACZC,EAAM9B,MACb6B,EAAIZ,YAAcW,EACd3D,EAAQK,KAAKwD,GACb7D,EAAQK,KAAK,CACX2C,UAAWY,EAAIX,QACfA,QAASW,EAAIZ,UACbG,WAAYS,EAAIV,WAChBG,mBAAoBO,EAAIR,mBACxBF,WAAYU,EAAIT,WAChBC,mBAAoBQ,EAAIP,wBAIzBrD,EAcF,SAAS8D,EAAWhE,GAA+C,IAAzCiE,IAAwC,yDAAnBC,IAAmB,yDACnEC,EAAU,GACVC,EAAW,GACTC,GAAc,IAAIvD,MAAOwD,cAe/B,IAAK,IAAI3D,KAdTX,EAAKG,SAAQ,SAACS,GACZ,IAAM0B,EAAY1B,EAAO,sBACnB2B,EAAU3B,EAAO,oBACjB2D,EAAOF,EAAchE,SAASO,EAAO,oBAEvBM,IAAlBiD,EAAQI,KACPN,GAAgB3B,IAAc2B,IAC9BC,GAAc3B,IAAY2B,EAI3BC,EAAQI,GAAQ,EAAIJ,EAAQI,GAF5BJ,EAAQI,GAAQ,KAKAJ,EAClBC,EAAS7D,KAAK,CACZgE,KAAM5D,EACNU,MAAO8C,EAAQxD,KAGnB,OAAOyD,EAEF,SAASI,EAAYxE,GAC1B,IAAIyE,EAAO,EACPC,EAAS,EACTC,EAAM,EAMV,OALA3E,EAAKG,SAAQ,SAACS,GACU,MAAlBA,EAAOgE,QAAoC,IAAlBhE,EAAOgE,QAAgBH,IAC9B,MAAlB7D,EAAOgE,QAAoC,IAAlBhE,EAAOgE,QAAgBF,IAC9B,MAAlB9D,EAAOgE,QAAoC,IAAlBhE,EAAOgE,QAAgBD,OAE/C,CAAEF,KAAMA,EAAMC,OAAQA,EAAQxD,UAAWyD,G,qBCtQ5CE,EAAQ,GACRC,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,UACA,WAwEaC,EAtEH,SAAC,GAAiC,IAA/B/E,EAA8B,EAA9BA,KAAMgB,EAAwB,EAAxBA,IAAKgE,EAAmB,EAAnBA,aAAmB,EACbC,IAAMC,UAAS,GADF,mBACpCC,EADoC,KAC3BC,EAD2B,KAQ3C,OALAH,IAAMI,WAAU,WAEdD,GAAW,KACV,CAACpF,IAGF,uBAAMZ,KAAK,QAAQnB,MAAK,4CAAoC+C,IACzDmE,GACC,kBAAC,QAAD,CACEnF,KAAMA,EACN6E,MAAOA,EACPS,OAAQ,IACRC,QAAS,GACTC,UAAQ,EACRC,QAAS,SAACC,GACRC,QAAQC,IAAIF,QACGxE,IAAXwE,EAAE1F,MAAiC,OAAX0F,EAAE1F,WAAqCkB,IAApBwE,EAAE1F,KAAKA,KAAKgB,KACzDgE,EAAa3E,SAASqF,EAAE1F,KAAKA,KAAKgB,QAKtC,kBAAC,OAAD,CAAM3C,KAAK,QACX,kBAAC,OAAD,CACEwH,qBAAA,EACAvH,KAAK,WACLwH,SAAS,YACTC,MAAO,CACL,OACA,SAACzH,GACC,OAAOwG,EAAOxG,KAGlB0H,MAAO,CAAC,QAAS,SAACC,GAAD,MAAS,QAC1BC,QAAS,CACP,iBACA,SAAClF,EAAKK,EAAO/C,GAgBX,MAAO,CAELD,KAAM,+CACNgD,MAAOL,EAAM,IAAMK,EAAQ,KAhBlB,IAAT/C,EACI,IACS,IAATA,EACA,IACS,IAATA,EACA,IACS,IAATA,EACA,IACS,IAATA,EACA,IACS,IAATA,EACA,IACA,SASV,kBAAC,SAAD,CAAQwH,SAAS,cCjDdK,MAjBf,YAAyB,IAATnG,EAAQ,EAARA,KAAQ,EACQiF,IAAMC,UAAS,GADvB,mBACfC,EADe,KACNC,EADM,KAOtB,OAJAH,IAAMI,WAAU,WAEdD,GAAW,KACV,CAACpF,IAEF,kBAAC,IAAMoG,SAAP,KACGjB,GACC,kBAAC,QAAD,CAAOnF,KAAMA,EAAMqG,SAAO,EAACf,OAAQ,KACjC,kBAAC,WAAD,CAAUQ,SAAS,kB,sDCiEdQ,E,uKAnDX,IAEMC,GAFK,IAAIC,KAGZC,aACAC,OAAOC,KAAKC,MAAM5G,MAErBuG,EAAGM,UAAU,CACXvI,KAAM,OACNwI,SAFW,SAEFC,EAAGC,GACV,OAAQD,EAAE3D,WAAa2D,EAAE1D,WAAa2D,EAAE3D,WAAa2D,EAAE5D,cAG3DmD,EAAGM,UAAU,CACXvI,KAAM,OACN2I,OAAQ,CAAC,aAAc,cACvB9I,IAAK,MACLkD,MAAO,QACP6F,QAAS,CAAC,aAEZvB,QAAQC,IAAIW,GACZ,IAAMY,EAAKR,KAAKC,MAAM5G,KACtB,OACE,6BACGmH,EAAGC,OAAS,GACX,kBAAC,QAAD,CAAO9B,OAAQ,IAAKtF,KAAMuG,EAAGc,KAAMhB,SAAO,GACvC,kBAAC,UAAD,CAASiB,QAAM,IAChB,kBAAC,aAAD,CAAYC,WAAS,IACrB,kBAAC,OAAD,CACElJ,KAAK,UACL2H,MAAO,CACLwB,OAAQ,MAGZ,kBAAC,WAAD,CAEE1B,SAAS,gBACTC,MAAO,MACP0B,OAAQ,CACN,CACEnJ,KAAM,QACNoJ,YAAa,EAAI,a,GA1CbzC,IAAM0C,WCUbC,EAzCF,SAAC,GAAsB,IAApB5H,EAAmB,EAAnBA,KAAM6H,EAAa,EAAbA,OAAa,EACH5C,IAAMC,UAAS,GADZ,mBAC1BC,EAD0B,KACjBC,EADiB,KAOjC,OAJAH,IAAMI,WAAU,WACdD,GAAW,KACX,CAACpF,IAGD,uBAAM/B,MAAM,mCAAgCmB,KAAK,SAC9C+F,GACC,kBAAC,QAAD,CACEG,OAAQ,IACRtF,KAAMA,EACNwF,UAAQ,EACRC,QAAS,SAACC,GAAD,OAAOmC,EAAOnC,KAGvB,kBAAC,aAAD,CAAYpH,KAAK,UACjB,kBAAC,OAAD,CAAMwJ,SAAS,IACf,kBAAC,UAAD,CAASC,WAAW,IACpB,kBAAC,WAAD,CACEjC,SAAS,aACT2B,OAAO,QACP5B,qBAAA,EACAE,MAAM,OACN9G,MAAO,CACL+I,UAAW,EACXC,OAAQ,QAEVjC,MAAO,CACL,OACA,CACEwB,QAAS,U,kBC0CVU,MAjDf,YAAgC,IAAbC,EAAY,EAAZA,SACjBxC,QAAQC,IAAI,WAAYuC,GACxB,IAAMjI,EA3BR,SAAuBF,GACrB,IAAIoI,EAAsB,GAsB1B,OApBAzC,QAAQC,IAAI,kBAAmB5F,GAC/BA,EAAKG,SAAQ,SAACS,GACZwH,EAAoB7H,KAAK,CACvB8H,OAAO,IAAD,OAAMzH,EAAOsC,UAAb,aAA2BtC,EAAOuC,SACxCmF,QAAS1H,EAAOwC,WAChBvC,KAAM0H,YACH3H,EAAO0C,oBAA0C,GAApB1C,EAAOwC,aAAkBoF,QAAQ,IAEjElK,KAAM,SAER8J,EAAoB7H,KAAK,CACvB8H,OAAO,IAAD,OAAMzH,EAAOuC,QAAb,aAAyBvC,EAAOsC,WACtCoF,QAAS1H,EAAOyC,WAChBxC,KAAM0H,YACH3H,EAAO2C,oBAA0C,GAApB3C,EAAOyC,aAAkBmF,QAAQ,IAEjElK,KAAM,YAIH,CAAEmK,GAAIL,EAAqBM,GArBR,IAyBVC,CAAcR,GAE9B,OADAxC,QAAQC,IAAI1F,GAEV,kBAAC,IAAMkG,SAAP,KACGlG,EAAQuI,GAAGrB,OAAS,GACnB,kBAAC,QAAD,CACE9B,OAAQ,IACRtF,KAAME,EAAQuI,GACdpC,SAAO,EACPuC,aAAc,CAAC,qBAEf,kBAAC,QAAD,CACE9C,SAAS,eACTC,MAAM,OACN8C,MAAM,SACNC,KAAM,CACJC,YAAa,OAGjB,kBAAC,UAAD,CAAS9K,MAAM,wBACZ,SAACA,EAAO+K,EAAOX,GACd1C,QAAQC,IAAI,QAASoD,GACrBrD,QAAQC,IAAI,QAAS3H,GACrB0H,QAAQC,IAAI,SAAUyC,GAGRW,EAAM,GAAGjD,MACvB,OACE,yBAAK9G,MAAO,CAAEgK,SAAU,MACtB,yBAAKhK,MAAO,CAAEA,MAAO,KACnB,sBAAYH,KAAZ,CAAiBoK,QAAM,GAAEjL,GACzB,6BACA,4BACA,uBAAO8H,MAAOiD,EAAM,GAAGjD,QAJzB,IAIoCiD,EAAM,GAAGhJ,KAAKqI,OAJlD,IAI2D,IACxDW,EAAM,GAAG3H,MALZ,IAKmB,6BACjB,uBAAO0E,MAAOiD,EAAM,GAAGjD,QANzB,WAM2C,IACxCiD,EAAM,GAAGhJ,KAAKsI,QAPjB,IAO0B,qC,QCiO7Ba,EAhQElE,QAAW,YAMxB,IALFnD,EAKC,EALDA,OACAsH,EAIC,EAJDA,MACAC,EAGC,EAHDA,eACAC,EAEC,EAFDA,kBACAC,EACC,EADDA,gBACC,EAEyCtE,aAFzC,mBAEMuE,EAFN,KAEqBC,EAFrB,OAGiCxE,aAHjC,mBAGMyE,EAHN,KAGiBC,EAHjB,OAImC1E,WAAe,IAJlD,mBAIM2E,EAJN,KAIkBC,EAJlB,OAK+B5E,YAAe,GAL9C,mBAKM6E,EALN,KAKgBC,EALhB,OAMyB9E,aANzB,mBAMM+E,EANN,KAMaC,EANb,OAOyBhF,aAPzB,mBAOMiF,EAPN,KAOaC,EAPb,KAgDD,OAtCAlF,aAAgB,WACd,QAAc/D,IAAV8I,EAAqB,CACvBrE,QAAQC,IAAI,gBAAiB2D,GAC5BS,EAAMI,UAAUb,GAChB,IAAMtH,EAAS+H,EAAMK,iBAAiBd,GAAiBe,YAEvDJ,EAAMK,iBAAiB,GAAItI,MAE7B,CAACsH,IACJtE,aAAgB,WAEdqE,EAAkBM,GAClBP,EACED,EAAMvB,QACJ,SAAC5B,GAAD,OAASA,EAAI/C,YAAc0G,GAAc3D,EAAI9C,UAAYyG,QAG5D,CAACA,IAsBF,gBAAC,IAAD,CACEY,IAAK,CACHC,OAAQ,EAAE,aAAc,cACxBC,MAAO,EACPzL,MAAO,OACP0L,KAAM,IAER1L,MAAO,CACL6G,SAAU,WACV8E,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,IAGV,gBAAC,IAAD,CAASzM,KAAK,QAAQwH,SAAS,YAC/B,gBAAC,IAAD,CAASxH,KAAK,OAAOwH,SAAS,YAC7B4D,GACC,gBAAC,IAAD,CAAOsB,OAAQtB,EAAUsB,QACtBtB,EAAUuB,QAAQ5M,KACnB,sBACEY,MAAO,CACLiM,OAAQ,IAGV,+CAAoBxB,EAAUuB,QAAQ7I,OACtC,wDAAgCsH,EAAUuB,QAAQ5I,UAIvDmH,GACC,gBAAC,IAAD,CAAOwB,OAAQxB,EAAcwB,QAC1B,YACD,sBACE/L,MAAO,CACLiM,OAAQ,IAGV,oCACM1B,EAAcyB,QAAQ/H,UAD5B,YACyCsG,EAAcyB,QAAQ9H,SAD/D,IAEIqG,EAAcyB,QAAQ7H,YAE1B,oCACMoG,EAAcyB,QAAQ9H,QAD5B,YACuCqG,EAAcyB,QAAQ/H,WAD7D,IAEIsG,EAAcyB,QAAQ5H,cAKhC,gBAAC,IAAD,CACE8H,MAAM,SACNhN,IAAK,IACLuI,OAAQ,CACN1G,KAAMoJ,EAAMvB,QACV,SAAC5B,GAAD,OACEA,EAAI/C,YAAc0G,GAClB3D,EAAI9C,UAAYyG,GAChBE,KAEJsB,OAAQ,CACN9M,KAAM,OACNgM,YAAa,UAIjBlL,KAAM,CACJiM,MAAO,wBACPC,OAAQ,SAACC,EAAOC,GACd,IAAM9J,EAAQ6J,EAAQC,EACtB,OAAO9J,EAAQ,GACX,EACAA,GAAS,GACT,IACAA,GAAS,GACT,IACAA,GAAS,GACT,IACAA,GAAS,GACT,IACA,KAGRqE,MAAO,CACLsF,MAAO,wBACPC,OAAQ,SAACC,EAAOC,GACd,IAAM9J,EAAQ6J,EAAQC,EACtB,OAAO9J,EAAQ,IACX,UACAA,GAAS,IACT,UACAA,GAAS,GACT,UACAA,GAAS,GACT,UACAA,GAAS,GACT,UACAA,GAAS,GACT,UACAA,GAAS,GACT,UACA,YAKRmH,MAAO,CACLyC,OAAQ,QAEVG,OAAQ,CAAElN,QAAQ,GAClBU,MAAO,CACLyM,QAAS,IAEXC,QAAS,CACPC,QAAQ,EACRC,YAAa,IACbC,SAAU,GACVC,SAAU,IAGZ,gBAAC,IAAD,CAAYzN,KAAK,QAAQ0N,QAAS,SAACtG,GAAD,OAlIjBuG,EAkIsCvG,EAjI3DC,QAAQC,IAAIqG,QACZA,EAAKhB,SACHxB,EAAiB,CACfuB,OAAQiB,EAAKC,OACbjB,QAASgB,EAAKhB,WALpB,IAAuBgB,MAqInB,gBAAC,IAAD,CACEE,cAAe,SAACnC,EAAOE,GACrBD,EAASD,GACTG,EAASD,IAGX/L,IAAK,IACLiO,QAAS,CACP/F,SAAS,GAEXK,OAAQ,CACN1G,KAAM8B,EACNsJ,OAAQ,CACN9M,KAAM,OACNgM,YAAa,aAGjBzF,MAAO,CACLyG,OAAQ,CACNe,eAAgB,CACd/N,KAAM,SAIZyH,MAAO,CACLsF,MAAO,cACPC,OAAQ,SAACrF,GACP,OAAOA,EAAM,IACT,UACAA,EAAM,IACN,UACAA,EAAM,IACN,UACAA,EAAM,IACN,UACA,YAGR4C,MAAO,CAELyC,OAAQ,WAGVG,OAAQ,CACNlN,OAAQ,CACNwH,MAAO,YAGX3G,KAAM,CACJiM,MAAO,QACPC,OAAQ,CAAC,EAAG,KAEdgB,OAAQ,CACN/N,OAAQ,CACNwH,MAAO,YAGX9G,MAAO,CACLyM,QAAS,KAGX,gBAAC,IAAD,CAAYpN,KAAK,QAAQ0N,QAAS,SAACtG,GAAD,OA5MrBuG,EA4MsCvG,EA3MvDC,QAAQC,IAAIqG,GACZA,EAAKhB,SACHtB,EAAa,CACXqB,OAAQiB,EAAKC,OACbjB,QAASgB,EAAKhB,UAElBlB,GAAY,QACZF,EAAcoC,EAAKhB,QAAQ5M,MAR7B,IAAmB4N,UCqBNM,G,uKA3EX,IAuBMhG,GADK,IAAIC,KACDC,aAAaC,OAAOC,KAAKC,MAAM5G,MAsC7C,OArCAuG,EAAGM,UAAU,CACXvI,KAAM,MACNwI,SAFW,SAEF0F,GAKP,OAHAA,EAAIC,iBAAmBlE,YACpBiE,EAAIlJ,oBAAuC,GAAjBkJ,EAAIpJ,aAAkBoF,QAAQ,IAEpDgE,KAGXjG,EAAGM,UAAU,CACXvI,KAAM,MACNwI,SAFW,SAEF0F,GAIP,OAHAA,EAAIE,iBAAmBnE,YACpBiE,EAAIjJ,oBAAuC,GAAjBiJ,EAAInJ,aAAkBmF,QAAQ,IAEpDgE,KAGXjG,EAAGM,UAAU,CACXvI,KAAM,OACN2I,OAAQ,CAAC,mBAAoB,oBAC7B9I,IAAK,MACLkD,MAAO,QACP6F,QAAS,CAAC,aAEZX,EAAGM,UAAU,CACXvI,KAAM,OACNwI,SAFW,SAEFC,EAAGC,GACV,OACED,EAAE0F,iBACF1F,EAAE2F,iBACF1F,EAAE0F,iBACF1F,EAAEyF,oBAKN,kBAAC,IAAMrG,SAAP,KACGO,KAAKC,MAAM5G,KAAKoH,OAAS,GACxB,kBAAC,QAAD,CAAO9B,OAAQ,IAAStF,KAAMuG,EAAGc,KAAM7B,UAAQ,GAE7C,kBAAC,UAAD,CAAS8B,QAAM,IACf,kBAAC,WAAD,CAAUxB,SAAS,gBAAgBC,MAAM,c,GArEjCd,IAAM0C,WCsBpBgF,GAAK,IAAInG,IAuRAoG,GAtRE,WAAM,MASK3H,IAAMC,SAAS,GATpB,mBASd2H,EATc,KASPC,EATO,OAUG7H,IAAMC,SAAS,IAVlB,mBAUdlF,EAVc,KAUR+M,EAVQ,OAYe9H,IAAMC,SACxCyH,GAAGlG,aAAaC,OAAOlG,EAAgBR,KAbpB,mBAYdgN,EAZc,KAYCC,EAZD,OAgBShI,IAAMC,SAClC5D,EAAmBd,EAAgBR,KAjBhB,mBAgBdkN,EAhBc,KAgBLC,EAhBK,OAmBelI,IAAMC,SAAS,OAnB9B,mBAmBdkI,EAnBc,KAmBFC,EAnBE,WAwBSpI,IAAMC,SAASrD,EAAU9B,EAAiBC,KAxBnD,mBAwBdsN,EAxBc,KAwBLC,EAxBK,OAyBatI,IAAMC,UAAS,GAzB5B,mBAyBdsI,EAzBc,KAyBHxI,EAzBG,QA0BiBC,IAAMC,SAAS,IA1BhC,qBA0BduI,GA1Bc,MA0BDC,GA1BC,SA2BuBzI,IAAMC,SAAS,IA3BtC,qBA2BdrB,GA3Bc,MA2BEyF,GA3BF,SA4ByBrE,IAAMC,SAAS,IA5BxC,qBA4BdqE,GA5Bc,MA4BGoE,GA5BH,SA6BS1I,IAAMC,SAASV,EAAYzE,EAAiBC,KA7BrD,qBA6Bd4N,GA7Bc,MA6BLC,GA7BK,SA8BG5I,IAAMC,SAASlB,EAAWjE,EAAiBC,KA9B9C,qBA8Bd8N,GA9Bc,MA8BRC,GA9BQ,MA0ErB,OA1CA9I,IAAMI,WAAU,WACd,IAAMnF,ERuJH,SAAqBF,EAAMgO,GAChC,IAAIC,EAAa,GAQjB,OAPAjO,EAAKG,SAAQ,SAACS,GACZ,IACMI,EADO,IAAIF,KAAKF,EAAOG,WACZE,WACC,IAAd+M,GAAsB3N,SAASW,KAASX,SAAS2N,IACnDC,EAAW1N,KAAKK,MAGbqN,EQhKWC,CAAYlO,EAAMwN,GAElCK,GAAWrJ,EAAYtE,IACvB6N,GAAQ/J,EAAW9D,IACnBqN,EAAW1L,EAAU3B,MACpB,CAACsN,IACJvI,IAAMI,WAAU,WACA,IAAVwH,GAAaE,EAAQhN,EAAiBoO,IAC5B,IAAVtB,GAAaE,EAAQhN,EAAiBoO,IAC5B,IAAVtB,GAAaE,EAAQhN,EAAiBoO,MACzC,CAACtB,IACJ5H,IAAMI,WAAU,WAEd8H,EAAW7L,EAAmBd,EAAgBR,KAC9CiN,EAAWN,GAAGlG,aAAaC,OAAOlG,EAAgBR,KAClD6N,GAAWrJ,EAAYxE,IACvBuN,EAAW1L,EAAU7B,IACrB+N,GAAQ/J,EAAWhE,MAGlB,CAACA,IAsBF,6BACE,6CACA,4BACE,wMAKA,6KAIA,gOAKA,uIAIA,qHAIA,gTAMA,qKAKA,6JAoBF,2BACE,uBAAKoO,KAAM,IACT,uBACEnP,MAAO,CAAEoP,MAAO,SAChBC,aAAc,EACdC,SAAU,SAAC7I,GAAD,OAAOoH,EAASpH,KAE1B,sBAAQ8I,OAAR,CAAerQ,IAAK,EAAGkD,MAAO,GAA9B,WAGA,sBAAQmN,OAAR,CAAerQ,IAAK,EAAGkD,MAAO,GAA9B,WAGA,sBAAQmN,OAAR,CAAerQ,IAAK,EAAGkD,MAAO,GAA9B,aAKJ,uBAAK+M,KAAM,IACT,uBACEK,OAAO,QACPC,gBAAgB,EAChBC,aAAc,SAACC,GACb,IAAMC,EAAS,IAAIC,WAWnB,OAVAD,EAAOE,OAAS,SAACrJ,GACfC,QAAQC,IAAI,gBAAiBoJ,KAAKC,MAAMvJ,EAAE2C,OAAO7G,SACjD,IAAM0N,EAAWF,KAAKC,MAAMvJ,EAAE2C,OAAO7G,QAErC2N,EAAA,EAAQC,QAAQ,yCAChBrC,EAAQhN,EAAiBmP,KAE3BL,EAAOQ,WAAWT,IAGX,IAGT,uBAAQU,KAAM,kBAACC,EAAA,EAAD,MAAoB1G,MAAM,SAAxC,kCAMN,uBAASvK,KAAK,aACd,uBAAKkR,OAAQ,CAAC,GAAI,KAChB,uBAAKpB,KAAK,KACR,kBAAC,EAAD,CAAMpO,KAAMkN,EAASrF,OA1H7B,SAAsBnC,GACpB,GAAe,OAAXA,EAAE1F,WAA4BkB,IAAXwE,EAAE1F,KAlCzBiN,EAAWN,GAAGlG,aAAaC,OAAOlG,EAAgBT,EAAiBC,MAoCjEqN,EAAc,YAEd,QAAoBnM,IAAhBwE,EAAE1F,KAAKA,KAAoB,CAC7B,IAAMuG,EAAKoG,GAAGlG,aAAaC,OAAOlG,EAAgBR,IAClDuG,EAAGM,UAAU,CACXvI,KAAM,SACNwI,SAFW,SAEF0F,GACP,OAAOA,EAAIlO,OAAS+B,SAASqF,EAAE1F,KAAKA,KAAK4B,WAG7CqL,EAAW1G,GACX8G,EAAc3H,EAAE1F,KAAKA,KAAK3B,WA8G1B,uBAAK+P,KAAK,MACR,uBAAKoB,OAAQ,CAAC,GAAI,KAChB,uBAAKpB,KAAK,MACR,kBAAC,EAAD,CACEjQ,IAAI,UACJ6B,KAAMgN,EAAc3F,KACpBrG,IAAKoM,EACLpI,aAAcA,KAGlB,uBAAKoJ,KAAK,KACR,uBAAMnP,MAAO,CAAEwQ,UAAW,KACxB,uBACExR,MAAM,UACNyR,OAAM,iBAAyB,IAAdlC,EAAqB,QAAUA,GAChDnM,MAAOuM,GAAQnJ,QAGnB,uBAAMxF,MAAO,CAAEwQ,UAAW,KACxB,uBACExR,MAAM,UACNyR,OAAM,iBAAyB,IAAdlC,EAAqB,QAAUA,GAChDnM,MAAOuM,GAAQlJ,UAGnB,uBAAMzF,MAAO,CAAEwQ,UAAW,KACxB,uBACExR,MAAM,aACNyR,OAAM,iBAAyB,IAAdlC,EAAqB,QAAUA,GAChDnM,MAAOuM,GAAQ1M,eAMvB,uBAAMjC,MAAO,CAAE0Q,UAAW,MACxB,kBAACC,EAAD,CAAY5P,KAAM8N,QAIvBR,EAAQ9J,YACP,uBACEqM,YAAU,EACV5Q,MAAO,CAAEoP,MAAO,QAChByB,YAAY,0BACZC,YAAU,EACVxB,SAAU,SAAC7I,GAAD,OAAOiI,GAAmBtN,SAASqF,KAC7CsK,aAAc,SAAC5N,EAAO7D,GAAR,OACZA,EAAO0R,SAASC,cAAcC,QAAQ/N,EAAM8N,gBAAkB,IAG/DE,OAAOC,KAAK/C,EAAQ9J,YAAYgH,KAAI,SAACrM,GAAD,OACnC,sBAAQqQ,OAAR,CAAerQ,IAAKmP,EAAQ9J,WAAWrF,GAAKE,KAAMgD,MAAOlD,GACtDmP,EAAQ9J,WAAWrF,GAAKE,UAKjC,uBAAKmR,OAAQ,CAAC,GAAI,KAChB,uBAAKpB,KAAK,MACR,uBAAMkC,UAAW,CAAEX,UAAW,MAC5B,kBAAC,EAAD,CACE7N,OAAQwL,EAAQ9J,WAChB4F,MAAOkE,EAAQ3K,MACf0G,eAAgBqE,GAChBpE,kBAAmBA,GACnBC,gBAAiBA,QAKzB,uBAAKiG,OAAQ,CAAC,GAAI,KAChB,uBAAKpB,KAAM,GACT,uBACEnQ,MAAK,2CAAmC4F,GAAnC,uBACLyM,UAAW,CAAEX,UAAW,MAExB,kBAACY,GAAD,CACEvQ,KAAM4D,EAAY6J,GAAa5J,QAIrC,uBAAKuK,KAAM,GACT,uBACEnQ,MAAK,6CACLqS,UAAW,CAAEX,UAAW,MAExB,kBAAC,EAAD,CAASxH,SAAUvE,EAAY6J,GAAa5J,QAGhD,uBAAKuK,KAAM,GACT,uBAAMnQ,MAAM,yBAAyBqS,UAAW,CAAEX,UAAW,MAC3D,kBAACa,EAAD,CAAexQ,KAAM4D,EAAY6J,GAAa5J,W,0DC3SlD4M,G,IAAAA,MA4BOC,GA1BK,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACrB,OACE,kBAACF,GAAD,CAAOG,QAAS,KAAMC,aAAW,EAACF,UAAWA,GAC3C,yBAAKG,UAAU,SACf,wBAAMC,MAAM,OAAOC,KAAK,SAASC,oBAAqB,CAAC,MACrD,uBAAMzR,KAAN,CAAWrB,IAAI,IAAIsH,QAAS,MAC1B,kBAAC,KAAD,CAAMyL,GAAG,KACP,kBAACC,GAAA,EAAD,MACA,mDAGJ,uBAAM3R,KAAN,CAAWrB,IAAI,IAAIsH,QAAS,MAC1B,kBAAC,KAAD,CAAMyL,GAAG,aACP,8BACE,kBAACE,GAAA,EAAD,MADF,IACuB,wDAI3B,uBAAM5R,KAAN,CAAWrB,IAAI,IAAImR,KAAM,kBAACC,EAAA,EAAD,OAAzB,Y,oBClBA8B,G,IAAAA,OAAQC,G,IAAAA,QAwCDC,GAvCA,WAAO,IAAD,EACetM,IAAMC,UAAS,GAD9B,mBACZyL,EADY,KACDa,EADC,KAOnB,OACE,kBAAC,KAAD,CAAeC,SAAUC,mBACvB,2BACE,kBAAC,GAAD,CAAOf,UAAWA,IAClB,uBAAQG,UAAU,eAChB,kBAACO,GAAD,CAAQP,UAAU,yBAAyB7R,MAAO,CAAEsG,QAAS,IAC1DN,IAAM0M,cACLhB,EAAYiB,KAAqBC,KACjC,CACEf,UAAW,UACXrL,QAdC,WACb+L,GAAcb,OAiBR,kBAACW,GAAD,CACErS,MAAO,CACLiM,OAAQ,YACR3F,QAAS,GACToK,UAAW,MAGb,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAOmC,OAAK,EAACC,KAAK,YAAYC,UAAWC,KACzC,kBAAC,KAAD,CAAOH,OAAK,EAACC,KAAK,KAAKC,UAAWjT,UC/B5BmT,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAACC,GAAD,MAGFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxN,QAAQwN,MAAMA,EAAMhE,c","file":"static/js/main.11fbf916.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { Card, Typography, Table, Divider, List } from \"antd\";\r\n\r\nconst columns = [\r\n  { title: \"Nombre\", dataIndex: \"name\", key: \"name\" },\r\n  { title: \"Tipo\", dataIndex: \"type\", key: \"type\" },\r\n  { title: \"Opcional\", dataIndex: \"option\", key: \"option\" },\r\n  { title: \"Descripción\", dataIndex: \"description\", key: \"description\" },\r\n]\r\n\r\nconst tableData = [\r\n  {\r\n    key: 1,\r\n    name: \"tripduration\",\r\n    type: \"Integer\",\r\n    option: \"False\",\r\n    description: \"Duración del viaje en minutos\",\r\n  },\r\n  {\r\n    key: 2,\r\n    name: \"starttime\",\r\n    type: \"time\",\r\n    option: \"False\",\r\n    description: \"Fecha y hora del inicio del viaje\",\r\n  },\r\n  {\r\n    key: 3,\r\n    name: \"stoptime\",\r\n    type: \"time\",\r\n    option: \"False\",\r\n    description: \"Fecha y hora del fin del viaje\",\r\n  },\r\n  {\r\n    key: 4,\r\n    name: \"start station id\",\r\n    type: \"integer\",\r\n    option: \"False\",\r\n    description: \"id de la estación de inicio\",\r\n  },\r\n  {\r\n    key: 5,\r\n    name: \"start station name\",\r\n    type: \"String\",\r\n    option: \"False\",\r\n    description: \"Nombre de la estación de inicio\",\r\n  },\r\n  {\r\n    key: 6,\r\n    name: \"start station latitude\",\r\n    type: \"Float\",\r\n    option: \"False\",\r\n    description: \"Latitud de la estación de inicio\",\r\n  },\r\n  {\r\n    key: 7,\r\n    name: \"start station longitude\",\r\n    type: \"Float\",\r\n    option: \"False\",\r\n    description: \"Longitud de la estación de inicio\",\r\n  },\r\n  ,\r\n  {\r\n    key: 8,\r\n    name: \"end station id\",\r\n    type: \"Integer\",\r\n    option: \"False\",\r\n    description: \"Id de la estación de salida\",\r\n  },\r\n  {\r\n    key: 9,\r\n    name: \"end station name\",\r\n    type: \"String\",\r\n    option: \"False\",\r\n    description: \"Nombre de la estación de salida\",\r\n  },\r\n  {\r\n    key: 10,\r\n    name: \"end station latitude\",\r\n    type: \"float\",\r\n    option: \"False\",\r\n    description: \"Latitud de la estación de salida\",\r\n  },\r\n  {\r\n    key: 11,\r\n    name: \"end station longitude\",\r\n    type: \"Float\",\r\n    option: \"False\",\r\n    description: \"Longitud de la estación de salida\",\r\n  },\r\n  {\r\n    key: 12,\r\n    name: \"bikeid\",\r\n    type: \"Integer\",\r\n    option: \"true\",\r\n    description: \"id de la cicla\",\r\n  },\r\n  {\r\n    key: 13,\r\n    name: \"usertype\",\r\n    type: \"String\",\r\n    option: \"true\",\r\n    description: \"Tipo de usuario\",\r\n  },\r\n  {\r\n    key: 14,\r\n    name: \"birth year\",\r\n    type: \"Integer\",\r\n    option: \"true\",\r\n    description: \"Año de nacimiento del usuario\",\r\n  },\r\n  {\r\n    key: 15,\r\n    name: \"gender\",\r\n    type: \"binary\",\r\n    option: \"true\",\r\n    description: \"male/female\",\r\n  }\r\n];\r\n\r\n// start station longitude\",\"end station id\",\"end station name\",\"end station latitude\",\"end station longitude\",\"bikeid\",\"usertype\",\"birth year\",\"gender\"\r\n\r\nconst listData = [\r\n  {\r\n    name: \"Nicolás Parra Ramos\",\r\n    linkedin: \"https://www.linkedin.com/in/nicol%C3%A1s-parra-ramos-366910140/\",\r\n    github: \"https://github.com/NicolasPrr\",\r\n    email: \"niparrara@unal.edu.co\",\r\n  },\r\n  {\r\n    name: \"Johnathan Andrés León Rodriguez\",\r\n    linkedin: \"https://www.linkedin.com/\",\r\n    github: \"https://github.com/jaleonro\",\r\n    email: \"jaleonro@unal.edu.co\",\r\n  },\r\n  {\r\n    name: \"Daniel Felipe Leyva\",\r\n    linkedin: \"https://www.linkedin.com/\",\r\n    github: \"https://github.com/dfleyvad\",\r\n    email: \"dfleyvad@unal.edu.co\",\r\n  },\r\n];\r\nconst { Title, Text } = Typography;\r\n\r\nconst Introduction = () => {\r\n  return (\r\n    <Card bordered={false} style={{ textAlign: \"center\" }}>\r\n      <Title>Dashboard COMPUTACIÓN VISUAL 2020-1</Title>\r\n\r\n      <Divider orientation=\"left\">Integrantes </Divider>\r\n\r\n      <List\r\n        size=\"small\"\r\n        // bordered\r\n        dataSource={listData}\r\n        renderItem={(item) => (\r\n          <List.Item\r\n            actions={[\r\n              <a href={item.linkedin}> Linkedin</a>,\r\n              <a href={item.github}>Github</a>,\r\n            ]}\r\n          >\r\n            <div style={{ textAlign: \"left\" }}>\r\n              <List.Item.Meta title={item.name} description={item.email} />\r\n            </div>\r\n          </List.Item>\r\n        )}\r\n      />\r\n\r\n      <Divider orientation=\"left\">Descripción </Divider>\r\n      <Text>\r\n        La pagina muestra la visualización de los datos del sistema de\r\n        bicicletas de NY{\" \"}\r\n        <a href=\"https://www.citibikenyc.com/system-data\">CitiBike</a> más\r\n        especificamente los datos del mes marzo del 2020 encontrados{\" \"}\r\n        <a href=\"https://s3.amazonaws.com/tripdata/JC-202003-citibike-tripdata.csv.zip\">\r\n          aquí\r\n        </a>{\" \"}\r\n        cuya estructura de datos se presenta en la siguiente tabla.\r\n      </Text>\r\n      <div style={{ marginTop: \"2%\" }}>\r\n        <Table size=\"small\" dataSource={tableData} columns={columns} pagination={{pageSize: 20}} />\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Introduction;\r\n","\r\nexport function deleteLargeTrips(data, minuts = 180 ){\r\n  let newData = []\r\n  data.forEach(element =>{\r\n    if(parseInt(element.tripduration)/60 <  minuts){\r\n      newData.push(element)\r\n    } \r\n  })\r\n  return newData\r\n}\r\nexport function getAmmountByDay(data) {\r\n  //All .json\r\n  let dictDay = {};\r\n  let results = [];\r\n  data.forEach((record) => {\r\n    const time = new Date(record.starttime);\r\n    const day = time.getDate();\r\n    if (dictDay[day] === undefined) {\r\n      const typeDay = time.getDay();\r\n      dictDay[day] = { value: 1, type: typeDay };\r\n    } else {\r\n      dictDay[day] = { ...dictDay[day], value: dictDay[day].value + 1 };\r\n    }\r\n  });\r\n  for (let nameObj in dictDay) {\r\n    results.push({\r\n      day: nameObj,\r\n      value: dictDay[nameObj].value,\r\n      type: dictDay[nameObj].type,\r\n    });\r\n  }\r\n  return results;\r\n}\r\n\r\nexport function avergayByDayOfWeek(data) {\r\n  /**\r\n   * data = [{value:100, day: 1, type:10}]\r\n   */\r\n  let totals = {};\r\n  let result = [];\r\n  data.forEach((element) => {\r\n    if (totals[element.type] === undefined) {\r\n      totals[element.type] = { count: 1, total: element.value };\r\n    } else {\r\n      totals[element.type] = {\r\n        count: totals[element.type].count + 1,\r\n        total: totals[element.type].total + element.value,\r\n      };\r\n    }\r\n  });\r\n  for (let nameObj in totals) {\r\n    const nameDay =\r\n      nameObj === \"0\"\r\n        ? \"L\"\r\n        : nameObj === \"1\"\r\n        ? \"M\"\r\n        : nameObj === \"2\"\r\n        ? \"W\"\r\n        : nameObj === \"3\"\r\n        ? \"J\"\r\n        : nameObj === \"4\"\r\n        ? \"V\"\r\n        : nameObj === \"5\"\r\n        ? \"S\"\r\n        : \"D\";\r\n    result.push({\r\n      name: nameDay,\r\n      value: totals[nameObj].total / totals[nameObj].count,\r\n      number: nameObj,\r\n    });\r\n  }\r\n  return result;\r\n}\r\nexport function getPlaces(data) {\r\n  /*\r\n  @data: array of all data\r\n  */\r\n  let places = {};\r\n  let lines = [];\r\n  let dictEdges = {};\r\n\r\n  //for all places\r\n  data.forEach((record) => {\r\n    const place = record[\"start station name\"];\r\n    if (places[place] === undefined) {\r\n      const coord = {\r\n        lat: record[\"start station latitude\"],\r\n        long: record[\"start station longitude\"],\r\n      };\r\n      places[place] = { coord: { ...coord }, input: 1, output: 0 };\r\n    } else {\r\n      places[place] = { ...places[place], input: places[place].input + 1 };\r\n    }\r\n  });\r\n  data.forEach((record) => {\r\n    const place = record[\"end station name\"];\r\n    if (places[place] === undefined) {\r\n      const coord = {\r\n        lat: record[\"end station latitude\"],\r\n        long: record[\"end station longitude\"],\r\n      };\r\n      places[place] = { coord: { ...coord }, output: 1, input: 0 };\r\n    } else {\r\n      places[place] = { ...places[place], output: places[place].output + 1 };\r\n    }\r\n  });\r\n\r\n  data.forEach((record) => {\r\n    //pairvalues count\r\n    const nameStart = record[\"start station name\"];\r\n    const nameEnd = record[\"end station name\"];\r\n    const tripduration = parseInt(record[\"tripduration\"]);\r\n    const startCoord = {\r\n      lat: record[\"start station latitude\"],\r\n      long: record[\"start station longitude\"],\r\n    };\r\n    const endCoord = {\r\n      lat: record[\"end station latitude\"],\r\n      long: record[\"end station longitude\"],\r\n    };\r\n    const name0 = `${nameStart}|${nameEnd}`;\r\n    if (dictEdges[name0] === undefined) {\r\n      dictEdges[name0] = {\r\n        value: 1,\r\n        startCoord: startCoord,\r\n        endCoord: endCoord,\r\n        tripduration: tripduration,\r\n      };\r\n    } else {\r\n      dictEdges[name0] = {\r\n        ...dictEdges[name0],\r\n        value: dictEdges[name0].value + 1,\r\n        tripduration: dictEdges[name0].tripduration + tripduration,\r\n      };\r\n    }\r\n  });\r\n  // console.log(\"dictEdges\", dictEdges);\r\n  // data.forEach( record =>{\r\n  //   const nameStart = record[\"start station name\"];\r\n  //   const nameEnd = record[\"end station name\"];\r\n  //   const name0 = `${nameStart}|${nameEnd}`;\r\n  //   const tripduration = parseInt(record[\"tripduration\"])\r\n  //   const totalTripDuration = dictEdges[`${nameStart}|${nameEnd}`].tripduration\r\n  //   const N =dictEdges[`${nameStart}|${nameEnd}`].value\r\n  //   const media =  totalTripDuration/N\r\n  //   if(Math.abs(media - tripduration) > 1500){\r\n  //     places[nameStart].input = places[nameStart].input  -1\r\n  //     places[nameEnd].output = places[nameEnd].output  -1\r\n  //     dictEdges[name0].value = dictEdges[name0].value -1\r\n  //     dictEdges[name0].tripduration  = dictEdges[name0].tripduration - tripduration\r\n  //   }\r\n  // })\r\n\r\n  let edges = [];\r\n  for (let nameObj in dictEdges) {\r\n    const names = nameObj.split(\"|\");\r\n    const startCoord = dictEdges[`${names[0]}|${names[1]}`].startCoord;\r\n    const endCoord = dictEdges[`${names[0]}|${names[1]}`].endCoord;\r\n    const startValue = dictEdges[`${names[0]}|${names[1]}`].value;\r\n    const startDuration = dictEdges[`${names[0]}|${names[1]}`].tripduration;\r\n    const endValue =\r\n      dictEdges[`${names[1]}|${names[0]}`] === undefined\r\n        ? 0\r\n        : dictEdges[`${names[1]}|${names[0]}`].value;\r\n    const endDuration =\r\n      dictEdges[`${names[1]}|${names[0]}`] === undefined\r\n        ? 0\r\n        : dictEdges[`${names[1]}|${names[0]}`].tripduration;\r\n    edges.push({\r\n      coord: [\r\n        [startCoord.long, startCoord.lat],\r\n        [endCoord.long, endCoord.lat],\r\n      ],\r\n      startName: names[0],\r\n      endName: names[1],\r\n      startToEnd: startValue,\r\n      endToStart: endValue,\r\n      startToEndDuration: startDuration,\r\n      endToStartDuration: endDuration,\r\n    });\r\n  }\r\n  // console.log(\"edges\", edges);\r\n  let placeArray = [];\r\n  let i = 0;\r\n  for (let namePlace in places) {\r\n    const lat = places[namePlace].coord.lat;\r\n    const long = places[namePlace].coord.long;\r\n    const input = places[namePlace].input;\r\n    const output = places[namePlace].output;\r\n    placeArray.push({\r\n      name: namePlace,\r\n      key: i,\r\n      centroid: [long * 1, lat * 1],\r\n      input: input,\r\n      output: output,\r\n    });\r\n    i++;\r\n  }\r\n  return { placeArray, edges };\r\n}\r\n\r\nexport function formatArray(data, currentStation) {\r\n  //sort by currentstation\r\n  let newData = [];\r\n  data.forEach((obj) => {\r\n    const objCp = { ...obj };\r\n    delete objCp.coord;\r\n    obj.startName === currentStation\r\n      ? newData.push(objCp)\r\n      : newData.push({\r\n          startName: obj.endName,\r\n          endName: obj.startName,\r\n          endToStart: obj.startToEnd,\r\n          endToStartDuration: obj.startToEndDuration,\r\n          startToEnd: obj.endToStart,\r\n          startToEndDuration: obj.endToStartDuration,\r\n        });\r\n  });\r\n  // console.log(\"newData\", newData);\r\n  return newData;\r\n}\r\n\r\nexport function filterByDay(data, chooseDay) {\r\n  let filterData = [];\r\n  data.forEach((record) => {\r\n    const time = new Date(record.starttime);\r\n    const day = time.getDate();\r\n    if (chooseDay === true || parseInt(day) === parseInt(chooseDay)) {\r\n      filterData.push(record);\r\n    }\r\n  });\r\n  return filterData;\r\n}\r\nexport function countByAge(data, startStation = true, endStation = true) {\r\n  let dictAge = {};\r\n  let arrayAge = [];\r\n  const currentYear = new Date().getFullYear()\r\n  data.forEach((record) => {\r\n    const nameStart = record[\"start station name\"];\r\n    const nameEnd = record[\"end station name\"];\r\n    const year = currentYear - parseInt(record[\"birth year\"]);\r\n    if (\r\n      dictAge[year] === undefined &&\r\n      (startStation || nameStart === startStation) &&\r\n      (endStation || nameEnd === endStation)\r\n    ) {\r\n      dictAge[year] = 1;\r\n    } else {\r\n      dictAge[year] = 1 + dictAge[year];\r\n    }\r\n  });\r\n  for (let nameObj in dictAge) {\r\n    arrayAge.push({\r\n      year: nameObj,\r\n      value: dictAge[nameObj],\r\n    });\r\n  }\r\n  return arrayAge;\r\n}\r\nexport function countGender(data) {\r\n  let male = 0;\r\n  let female = 0;\r\n  let und = 0;\r\n  data.forEach((record) => {\r\n    if (record.gender === \"1\" || record.gender === 1  ) male++;\r\n    if (record.gender === \"2\" || record.gender === 2  ) female++;\r\n    if (record.gender === \"0\" || record.gender === 0  ) und++;\r\n  });\r\n  return { male: male, female: female, undefined: und };\r\n}\r\n// export { getAmmountByDay, avergayByDayOfWeek };\r\n","import React from \"react\";\r\n\r\nimport { Card } from \"antd\";\r\n\r\nimport { Chart, Geom, Axis, Legend, Interval } from \"bizcharts\";\r\n\r\nconst scale = {};\r\nconst colors = [\r\n  \"#6395F9\",\r\n  \"#62DAAB\",\r\n  \"#657798\",\r\n  \"#F6C022\",\r\n  \"#E96C5B\",\r\n  \"#74CBED\",\r\n  \"#9967BD\",\r\n];\r\nconst Bar = ({ data, day, setNumberDay }) => {\r\n  const [mounted, setMounted] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    // Actualiza el título del documento usando la API del navegador\r\n    setMounted(true);\r\n  }, [data]);\r\n\r\n  return (\r\n    <Card size=\"small\" title={`cantidad de recorridos por día-${day}`}>\r\n      {mounted && (\r\n        <Chart\r\n          data={data}\r\n          scale={scale}\r\n          height={237}\r\n          padding={30}\r\n          forceFit\r\n          onClick={(e) => {\r\n            console.log(e)\r\n            if (e.data !== undefined && e.data !== null && e.data.data.day !== undefined) {\r\n              setNumberDay(parseInt(e.data.data.day));\r\n            }\r\n          }}\r\n        >\r\n          {/* <Axis name=\"value\" /> */}\r\n          <Axis name=\"day\" />\r\n          <Geom\r\n            element-highlight\r\n            type=\"interval\"\r\n            position=\"day*value\"\r\n            color={[\r\n              \"type\",\r\n              (type) => {\r\n                return colors[type];\r\n              },\r\n            ]}\r\n            label={[\"value\", (val) => \"val\"]}\r\n            tooltip={[\r\n              \"day*value*type\",\r\n              (day, value, type) => {\r\n                // array\r\n                const dayName =\r\n                  type === 0\r\n                    ? \"L\"\r\n                    : type === 1\r\n                    ? \"M\"\r\n                    : type === 2\r\n                    ? \"W\"\r\n                    : type === 3\r\n                    ? \"J\"\r\n                    : type === 4\r\n                    ? \"V\"\r\n                    : type === 5\r\n                    ? \"S\"\r\n                    : \"D\";\r\n                return {\r\n                  //   title=\"day-value-name\",\r\n                  name: \"día del mes, recorrido, dia de la semana \",\r\n                  value: day + \"-\" + value + \"-\" + dayName,\r\n                };\r\n              },\r\n            ]}\r\n          >\r\n            <Legend position=\"right\" />\r\n          </Geom>\r\n        </Chart>\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\nexport default Bar;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Chart, Interval } from \"bizcharts\";\r\n\r\n// 数据源\r\n// const data = [\r\n//   { genre: 'Sports', sold: 275 },\r\n//   { genre: 'Strategy', sold: 155 },\r\n//   { genre: 'Action', sold: 230 },\r\n//   { genre: 'Shooter', sold: 250 },\r\n//   { genre: 'Other', sold: 450 }\r\n// ];\r\n\r\nfunction Demo({ data }) {\r\n  const [mounted, setMounted] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    // Actualiza el título del documento usando la API del navegador\r\n    setMounted(true);\r\n  }, [data]);\r\n  return (\r\n    <React.Fragment>\r\n      {mounted && (\r\n        <Chart data={data} autoFit height={100}>\r\n          <Interval position=\"year*value\" />\r\n        </Chart>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default Demo;\r\n","import React from \"react\";\r\nimport {\r\n  Chart,\r\n  Interval,\r\n  Axis,\r\n  Tooltip,\r\n  Coordinate,\r\n  Label,\r\n  Legend,\r\n  View,\r\n  Guide,\r\n  Shape,\r\n  Facet,\r\n  Util,\r\n} from \"bizcharts\";\r\nimport DataSet from \"@antv/data-set\";\r\nconst exampleData = [\r\n  {\r\n    endName: \"Monmouth and 6th\",\r\n    endToStart: 2,\r\n    startName: \"Newport Pkwy\",\r\n    startToEnd: 2,\r\n  },\r\n  {\r\n    endName: \"Riverview Park\",\r\n    endToStart: 21,\r\n    startName: \"Heights Elevator\",\r\n    startToEnd: 21,\r\n  },\r\n  {\r\n    endName: \"Newport Pkwy\",\r\n    endToStart: 9,\r\n    startName: \"Heights Elevator\",\r\n    startToEnd: 9,\r\n  },\r\n];\r\nclass Stacked extends React.Component {\r\n  render() {\r\n    const ds = new DataSet();\r\n  \r\n    const dv = ds\r\n      .createView()\r\n      .source(this.props.data);\r\n    //   .source(formatArray(this.props.data, this.props.currentStation));\r\n    dv.transform({\r\n      type: \"sort\",\r\n      callback(a, b) {\r\n        return (a.startToEnd + a.endToStart - b.endToStart - b.startToEnd) ;\r\n      },\r\n    });\r\n    dv.transform({\r\n      type: \"fold\",\r\n      fields: [\"startToEnd\", \"endToStart\"],\r\n      key: \"key\",\r\n      value: \"valor\",\r\n      retains: [\"endName\"],\r\n    });\r\n    console.log(dv);\r\n    const dt = this.props.data;\r\n    return (\r\n      <div>\r\n        {dt.length > 0 && (\r\n          <Chart height={300} data={dv.rows} autoFit >\r\n             <Tooltip shared />\r\n            <Coordinate transpose />\r\n            <Axis\r\n              name=\"endName\"\r\n              label={{\r\n                offset: 12,\r\n              }}\r\n            />\r\n            <Interval\r\n            //   adjust={[{ type: \"stack\" }]}\r\n              position=\"endName*valor\"\r\n              color={\"key\"}\r\n              adjust={[\r\n                {\r\n                  type: \"dodge\",\r\n                  marginRatio: 1 / 32\r\n                }\r\n              ]}\r\n  \r\n            />\r\n          </Chart>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Stacked;\r\n","import React from \"react\";\r\nimport { Card } from \"antd\";\r\n\r\nimport { Chart, Interval, Tooltip, Axis, Coordinate } from \"bizcharts\";\r\n\r\nconst Rose = ({ data, filter }) => {\r\n  const [mounted, setMounted] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    setMounted(true);\r\n  },[data]);\r\n\r\n  return (\r\n    <Card title=\"Promedio por día de la semana\" size=\"small\">\r\n      {mounted && (\r\n        <Chart\r\n          height={400}\r\n          data={data}\r\n          forceFit\r\n          onClick={(e) => filter(e)}\r\n          // onMouseDown={e => console.log(e)}\r\n        >\r\n          <Coordinate type=\"polar\" />\r\n          <Axis visible={true} />\r\n          <Tooltip showTitle={false} />\r\n          <Interval\r\n            position=\"name*value\"\r\n            adjust=\"stack\"\r\n            element-highlight\r\n            color=\"name\"\r\n            style={{\r\n              lineWidth: 1,\r\n              stroke: \"#fff\",\r\n            }}\r\n            label={[\r\n              \"name\",\r\n              {\r\n                offset: -15,\r\n              },\r\n            ]}\r\n          />\r\n        </Chart>\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\nexport default Rose;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Chart, Point, Tooltip } from \"bizcharts\";\r\nimport DataSet from \"@antv/data-set\";\r\nimport { Typography, Badge, Divider } from \"antd\";\r\n\r\nfunction scatterFormat(data) {\r\n  let newDataSourceTarget = [];\r\n  let newDataTargetSource = [];\r\n  console.log(\"scatter format:\", data);\r\n  data.forEach((record) => {\r\n    newDataSourceTarget.push({\r\n      target: ` ${record.startName}->${record.endName}`,\r\n      ammount: record.startToEnd,\r\n      time: parseFloat(\r\n        (record.startToEndDuration / (record.startToEnd * 60)).toFixed(2)\r\n      ),\r\n      type: \"S.T.\",\r\n    });\r\n    newDataSourceTarget.push({\r\n      target: ` ${record.endName}->${record.startName}`,\r\n      ammount: record.endToStart,\r\n      time: parseFloat(\r\n        (record.endToStartDuration / (record.endToStart * 60)).toFixed(2)\r\n      ),\r\n      type: \"T.S.\",\r\n    });\r\n  });\r\n\r\n  return { st: newDataSourceTarget, ts: newDataTargetSource };\r\n}\r\nfunction Scatter({ dataProp }) {\r\n  console.log(\"dataprop\", dataProp);\r\n  const newData = scatterFormat(dataProp);\r\n  console.log(newData);\r\n  return (\r\n    <React.Fragment>\r\n      {newData.st.length > 0 && (\r\n        <Chart\r\n          height={300}\r\n          data={newData.st}\r\n          autoFit\r\n          interactions={[\"legend-highlight\"]}\r\n        >\r\n          <Point\r\n            position=\"ammount*time\"\r\n            color=\"type\"\r\n            shape=\"circle\"\r\n            fill={{\r\n              fillOpacity: 0.85,\r\n            }}\r\n          />\r\n          <Tooltip title=\"Tiempo de recorrido\">\r\n            {(title, items, target) => {\r\n              console.log(\"items\", items);\r\n              console.log(\"title\", title);\r\n              console.log(\"target\", target);\r\n              // items 是个数组，即被触发tooltip的数据。\r\n              // 获取items的颜色\r\n              const color = items[0].color;\r\n              return (\r\n                <div style={{ minWidth: 200 }}>\r\n                  <div style={{ style: 20 }}>\r\n                    <Typography.Text strong>{title}</Typography.Text>\r\n                    <br />\r\n                    <Divider />\r\n                    <Badge color={items[0].color} /> {items[0].data.target}:{\" \"}\r\n                    {items[0].value} <br />\r\n                    <Badge color={items[0].color} /> viajes:{\" \"}\r\n                    {items[0].data.ammount} <br />\r\n                  </div>\r\n                </div>\r\n              );\r\n            }}\r\n          </Tooltip>\r\n        </Chart>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default Scatter;\r\n","import {\r\n  AMapScene,\r\n  LineLayer,\r\n  LayerEvent,\r\n  MapboxScene,\r\n  Marker,\r\n  Control,\r\n  PointLayer,\r\n  Popup,\r\n} from \"@antv/l7-react\";\r\nimport * as React from \"react\";\r\n\r\n// const IMarkerOption= {}\r\nconst dataFlyTest = [\r\n  // {\r\n  //   coord: [\r\n  //     [-74.0337589, 40.7272235],\r\n  //     [-74.21105069962759, 4.285993532528952],\r\n  //   ],\r\n  // },\r\n  {\r\n    coord: [\r\n      [-74.0337589, 40.7272235],\r\n      [-74.044247311, 40.727595966],\r\n    ],\r\n    size: 3,\r\n    key: 1,\r\n  },\r\n  {\r\n    coord: [\r\n      [-74.06762212514877, 40.7253399253558],\r\n      [-74.0337589, 40.7272235],\r\n    ],\r\n    size: 4,\r\n    key: 2,\r\n  },\r\n];\r\nconst MapScene = React.memo(function Map({\r\n  places,\r\n  lines,\r\n  edgeFilterProp,\r\n  setCurrentStation,\r\n  searchedStation,\r\n}) {\r\n  // console.log(places);\r\n  const [popupInfoLine, setPopupInfoLine] = React.useState();\r\n  const [popupInfo, setPopupInfo] = React.useState();\r\n  const [filterLine, setFilterLine] = React.useState(\"\");\r\n  const [allLines, setAllLines] = React.useState(true);\r\n  const [layer, setLayer] = React.useState();\r\n  const [scene, setScene] = React.useState();\r\n  // console.log(\"places:\" , places)\r\n\r\n  React.useEffect(() => {\r\n    if (layer !== undefined) {\r\n      console.log(\"searchstation\", searchedStation);\r\n       layer.setSelect(searchedStation);\r\n       const coord =  layer.getEncodedData()[searchedStation].coordinates\r\n      //  console.log(\"encoded\" , layer.getEncodedData())\r\n       scene.setZoomAndCenter(15, coord);\r\n    }\r\n  }, [searchedStation]);\r\n  React.useEffect(() => {\r\n    //accion cuando se le da click a un nodo\r\n    setCurrentStation(filterLine);\r\n    edgeFilterProp(\r\n      lines.filter(\r\n        (val) => val.startName === filterLine || val.endName === filterLine\r\n      )\r\n    );\r\n  }, [filterLine]);\r\n  function showPopup(args) {\r\n    console.log(args);\r\n    args.feature &&\r\n      setPopupInfo({\r\n        lnglat: args.lngLat,\r\n        feature: args.feature,\r\n      });\r\n    setAllLines(false);\r\n    setFilterLine(args.feature.name);\r\n  }\r\n  function showPopupLine(args) {\r\n    console.log(args);\r\n    args.feature &&\r\n      setPopupInfoLine({\r\n        lnglat: args.lngLat,\r\n        feature: args.feature,\r\n      });\r\n    // setAllLines(false);\r\n    // setFilterLine(args.feature.name);\r\n  }\r\n  return (\r\n    <MapboxScene\r\n      map={{\r\n        center: [-74.044247311, 40.727595971],\r\n        pitch: 0,\r\n        style: \"dark\",\r\n        zoom: 13,\r\n      }}\r\n      style={{\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n      }}\r\n    >\r\n      <Control type=\"scale\" position=\"topleft\" />\r\n      <Control type=\"zoom\" position=\"topleft\" />\r\n      {popupInfo && (\r\n        <Popup lnglat={popupInfo.lnglat}>\r\n          {popupInfo.feature.name}\r\n          <ul\r\n            style={{\r\n              margin: 0,\r\n            }}\r\n          >\r\n            <li>Parten de aquí:{popupInfo.feature.input}</li>\r\n            <li>Llegan de otras estaciones:{popupInfo.feature.output}</li>\r\n          </ul>\r\n        </Popup>\r\n      )}\r\n      {popupInfoLine && (\r\n        <Popup lnglat={popupInfoLine.lnglat}>\r\n          {\"Trayectos\"}\r\n          <ul\r\n            style={{\r\n              margin: 0,\r\n            }}\r\n          >\r\n            <li>\r\n              {`${popupInfoLine.feature.startName}-${popupInfoLine.feature.endName}`}\r\n              :{popupInfoLine.feature.startToEnd}\r\n            </li>\r\n            <li>\r\n              {`${popupInfoLine.feature.endName}-${popupInfoLine.feature.startName}`}\r\n              :{popupInfoLine.feature.endToStart}\r\n            </li>\r\n          </ul>\r\n        </Popup>\r\n      )}\r\n      <LineLayer\r\n        blend=\"normal\"\r\n        key={\"2\"}\r\n        source={{\r\n          data: lines.filter(\r\n            (val) =>\r\n              val.startName === filterLine ||\r\n              val.endName === filterLine ||\r\n              allLines\r\n          ),\r\n          parser: {\r\n            type: \"json\",\r\n            coordinates: \"coord\",\r\n            // key: \"key\",\r\n          },\r\n        }}\r\n        size={{\r\n          field: \"startToEnd*endToStart\",\r\n          values: (start, end) => {\r\n            const total = start + end;\r\n            return total > 50\r\n              ? 6\r\n              : total >= 40\r\n              ? 4.5\r\n              : total >= 30\r\n              ? 3.5\r\n              : total >= 20\r\n              ? 2.5\r\n              : total >= 10\r\n              ? 1.5\r\n              : 0.7;\r\n          },\r\n        }}\r\n        color={{\r\n          field: \"startToEnd*endToStart\",\r\n          values: (start, end) => {\r\n            const total = start + end;\r\n            return total > 300\r\n              ? \"#EAF205\"\r\n              : total >= 100\r\n              ? \"#04D94F\"\r\n              : total >= 50\r\n              ? \"#914BF2\"\r\n              : total >= 40\r\n              ? \"#4BB2F2\"\r\n              : total >= 30\r\n              ? \"#8C0707\"\r\n              : total >= 20\r\n              ? \"#3C474B\"\r\n              : total >= 10\r\n              ? \"#F2059F\"\r\n              : \"#f5f5f5\";\r\n          },\r\n\r\n          // values: \"#8C1EB2\",\r\n        }}\r\n        shape={{\r\n          values: \"line\",\r\n        }}\r\n        active={{ option: true }}\r\n        style={{\r\n          opacity: 0.5,\r\n        }}\r\n        animate={{\r\n          enable: true,\r\n          trailLength: 1.2,\r\n          interval: 0.5,\r\n          duration: 7,\r\n        }}\r\n      >\r\n        <LayerEvent type=\"click\" handler={(e) => showPopupLine(e)} />\r\n      </LineLayer>\r\n      {/* <PointLayer/> */}\r\n      <PointLayer\r\n        onLayerLoaded={(layer, scene) => {\r\n          setLayer(layer);\r\n          setScene(scene)\r\n          // scene.setZoomAndCenter(, )\r\n        }}\r\n        key={\"3\"}\r\n        options={{\r\n          autoFit: true,\r\n        }}\r\n        source={{\r\n          data: places,\r\n          parser: {\r\n            type: \"json\",\r\n            coordinates: \"centroid\",\r\n          },\r\n        }}\r\n        scale={{\r\n          values: {\r\n            confirmedCount: {\r\n              type: \"log\",\r\n            },\r\n          },\r\n        }}\r\n        color={{\r\n          field: \"output*name\",\r\n          values: (val) => {\r\n            return val > 1000\r\n              ? \"#AD2310\"\r\n              : val > 700\r\n              ? \"#FF5F4A\"\r\n              : val > 500\r\n              ? \"#FA472F\"\r\n              : val > 300\r\n              ? \"#2FFA97\"\r\n              : \"#00AD58\";\r\n          },\r\n        }}\r\n        shape={{\r\n          // values: \"circle\"\r\n          values: \"hexagon\",\r\n          // values: \"circle\"\r\n        }}\r\n        active={{\r\n          option: {\r\n            color: \"#F2E74B\",\r\n          },\r\n        }}\r\n        size={{\r\n          field: \"input\",\r\n          values: [5, 10],\r\n        }}\r\n        select={{\r\n          option: {\r\n            color: \"#F2E74B\",\r\n          },\r\n        }}\r\n        style={{\r\n          opacity: 0.8,\r\n        }}\r\n      >\r\n        <LayerEvent type=\"click\" handler={(e) => showPopup(e)} />\r\n        {/* <LayerEvent\r\n          type=\"mousemove\"\r\n          handler={(e) =>\r\n            e.feature &&\r\n            setPopupInfo({\r\n              lnglat: e.lngLat,\r\n              feature: e.feature,\r\n            })\r\n          }\r\n        /> */}\r\n      </PointLayer>\r\n\r\n      {/* <LayerEvent type=\"click\" handler={(e) => alert(\"hey\")} /> */}\r\n    </MapboxScene>\r\n  );\r\n});\r\n\r\nexport default MapScene;\r\n","import React from \"react\";\r\nimport {\r\n  G2,\r\n  Chart,\r\n  Geom,\r\n  Axis,\r\n  Tooltip,\r\n  Coordinate,\r\n  Label,\r\n  Legend,\r\n  Interval,\r\n  Util,\r\n} from \"bizcharts\";\r\nimport DataSet from \"@antv/data-set\";\r\n\r\nclass Basic extends React.Component {\r\n  render() {\r\n    const data = [\r\n      {\r\n        country: \"中国\",\r\n        population: 131744,\r\n      },\r\n      {\r\n        country: \"印度\",\r\n        population: 104970,\r\n      },\r\n      {\r\n        country: \"美国\",\r\n        population: 29034,\r\n      },\r\n      {\r\n        country: \"印尼\",\r\n        population: 23489,\r\n      },\r\n      {\r\n        country: \"巴西\",\r\n        population: 18203,\r\n      },\r\n    ];\r\n    const ds = new DataSet();\r\n    const dv = ds.createView().source(this.props.data);\r\n    dv.transform({\r\n      type: \"map\",\r\n      callback(row) {\r\n        // 加工数据后返回新的一行，默认返回行数据本身\r\n        row.tripSourceTarget = parseFloat(\r\n          (row.startToEndDuration / (row.startToEnd * 60)).toFixed(2)\r\n        );\r\n        return row;\r\n      },\r\n    });\r\n    dv.transform({\r\n      type: \"map\",\r\n      callback(row) {\r\n        row.tripTargetSource = parseFloat(\r\n          (row.endToStartDuration / (row.endToStart * 60)).toFixed(2)\r\n        );\r\n        return row;\r\n      },\r\n    });\r\n    dv.transform({\r\n      type: \"fold\",\r\n      fields: [\"tripSourceTarget\", \"tripTargetSource\"],\r\n      key: \"key\",\r\n      value: \"value\",\r\n      retains: [\"endName\"],\r\n    });\r\n    dv.transform({\r\n      type: \"sort\",\r\n      callback(a, b) {\r\n        return (\r\n          a.tripSourceTarget +\r\n          a.tripTargetSource -\r\n          b.tripTargetSource -\r\n          b.tripSourceTarget\r\n        );\r\n      },\r\n    });\r\n    return (\r\n      <React.Fragment>\r\n        {this.props.data.length > 0 && (\r\n          <Chart height={300    } data={dv.rows} forceFit>\r\n            {/* <Coordinate transpose /> */}\r\n            <Tooltip shared/>\r\n            <Interval position=\"endName*value\" color=\"key\" />\r\n          </Chart>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Basic;\r\n","import React from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Select,\r\n  Statistic,\r\n  Divider,\r\n  Upload,\r\n  Button,\r\n  message,\r\n} from \"antd\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport {\r\n  deleteLargeTrips,\r\n  avergayByDayOfWeek,\r\n  getAmmountByDay,\r\n  getPlaces,\r\n  formatArray,\r\n  filterByDay,\r\n  countGender,\r\n  countByAge,\r\n} from \"../utils\";\r\n// import data from \"../data/citybike/bike_2020_03-.json\";\r\n// import data from \"../data/citybike/bike_2019_10.json\";\r\nimport data0 from \"../data/citybike/bike_2020_03-.json\";\r\n\r\nimport BarChart from \"../components/charts/Bar\";\r\nimport SmallChart from \"../components/charts/SmallChart\";\r\nimport HorizontalBar from \"../components/charts/HorizontalBar\";\r\nimport Rose from \"../components/charts/Rose\";\r\nimport Scatter from \"../components/charts/ScatterChart\";\r\nimport Map from \"../components/charts/map/Map\";\r\nimport TripDurationChart from \"../components/charts/TripDurationChart\";\r\n// // import MapBox from \"../components/charts/map/MapBox\";\r\nimport DataSet from \"@antv/data-set\";\r\n\r\nconst ds = new DataSet();\r\nconst Citibike = () => {\r\n  /*\r\n    @ammountsByDay:  Cantidad de viajes por día\r\n    @ammountsByDay:  Promedio de viajes dependiendo del día L-M-W-J-V-S-D\r\n    @CurrentDay:     Día actual, funciona para filtrar los días en el grafico de barras\r\n    @dataMap:        Variable que contiene todos los lugares y los lados que posteriormente se ponen en el mapa\r\n    @edgesFilter:        Variable que contiene los lados una vez se le da click al respectivo nodo (lugar)\r\n    @NumberDay:        Variable que contiene el numero de dia que filtra los registro del mapa\r\n  */\r\n  const [month, setMonth] = React.useState(0);\r\n  const [data, setData] = React.useState([]);\r\n\r\n  const [ammountsByDay, setAmmount] = React.useState(\r\n    ds.createView().source(getAmmountByDay(data))\r\n  );\r\n\r\n  const [average, setAverage] = React.useState(\r\n    avergayByDayOfWeek(getAmmountByDay(data))\r\n  );\r\n  const [currentDay, setCurrentDay] = React.useState(\"All\");\r\n\r\n  function resetBar() {\r\n    setAmmount(ds.createView().source(getAmmountByDay(deleteLargeTrips(data))));\r\n  }\r\n  const [dataMap, setDataMap] = React.useState(getPlaces(deleteLargeTrips(data)));\r\n  const [numberDay, setNumberDay] = React.useState(true);\r\n  const [edgesFilter, setEdgesFilter] = React.useState([]);\r\n  const [currentStation, setCurrentStation] = React.useState([]);\r\n  const [searchedStation, setsearchedStation] = React.useState(\"\");\r\n  const [genders, setGenders] = React.useState(countGender(deleteLargeTrips(data)));\r\n  const [ages, setAges] = React.useState(countByAge(deleteLargeTrips(data)));\r\n\r\n  React.useEffect(() => {\r\n    const newData = filterByDay(data, numberDay);\r\n    // console.log(\"newdata\", newData);\r\n    setGenders(countGender(newData));\r\n    setAges(countByAge(newData));\r\n    setDataMap(getPlaces(newData));\r\n  }, [numberDay]);\r\n  React.useEffect(() => {\r\n    if (month === 0) setData(deleteLargeTrips(data0));\r\n    if (month === 1) setData(deleteLargeTrips(data0));\r\n    if (month === 2) setData(deleteLargeTrips(data0));\r\n  }, [month]);\r\n  React.useEffect(() => {\r\n    // const new Data =\r\n    setAverage(avergayByDayOfWeek(getAmmountByDay(data)));\r\n    setAmmount(ds.createView().source(getAmmountByDay(data)));\r\n    setGenders(countGender(data));\r\n    setDataMap(getPlaces(data));\r\n    setAges(countByAge(data));\r\n    // console.log(\"large strip\", deleteLargeTrips(data))\r\n    // console.log(deleteLargeTrips(data), data.length)\r\n  }, [data]);\r\n\r\n  function filterAmmout(e) {\r\n    if (e.data === null || e.data === undefined) {\r\n      resetBar();\r\n      setCurrentDay(\"All\");\r\n    } else {\r\n      if (e.data.data !== undefined) {\r\n        const dv = ds.createView().source(getAmmountByDay(data));\r\n        dv.transform({\r\n          type: \"filter\",\r\n          callback(row) {\r\n            return row.type === parseInt(e.data.data.number);\r\n          },\r\n        });\r\n        setAmmount(dv);\r\n        setCurrentDay(e.data.data.name);\r\n      }\r\n    }\r\n  }\r\n  // console.log(getPlaces(data))\r\n  return (\r\n    <div>\r\n      <h3>Instrucciones</h3>\r\n      <ul>\r\n        <li>\r\n          Usted puede visualizar el promedio por día de la semana en la primera\r\n          grafica, usted puede filtrar el grafico de barras si se le da click\r\n          dentro del grafico de torta\r\n        </li>\r\n        <li>\r\n          Para restaurar el grafico de barras (cantidad por día) usted debe\r\n          hacer click en un espacio en blanco en el grafico de promedio por día\r\n        </li>\r\n        <li>\r\n          Se puede filtrar la cantidad de mujeres y hombres por día si se le da\r\n          click en el grafico de barras de cantidad de recorridos, este también\r\n          filtrará la cantidad de personas por año\r\n        </li>\r\n        <li>\r\n          Cuando usteed selecciona un día el mapa mostrará solamente la\r\n          información acerca de ese día\r\n        </li>\r\n        <li>\r\n          Es posible encontrar la estación de bicicletas en el mapa con la barra\r\n          de busqueda\r\n        </li>\r\n        <li>\r\n          Cada véz que se da click a un nodo (estación) se podrá ver tres\r\n          graficos, cantidad de usuarios que entran a la estación (starToEnd),\r\n          cantidad de usuarios que llegan de otras estaciones(EndToStart) y el\r\n          tiempo promedio que se demora de estación a estación\r\n        </li>\r\n        <li>\r\n          Existen algunos datos que tienen el tiempo de viaje muy largo, estos\r\n          datos pueden provocar que las graficas no se vean correctamente.\r\n        </li>\r\n\r\n        <li>\r\n          Se puede subir datos de otras fechas siempre y cuando el archivo tenga el formato correspondiente  y tenga extensión json\r\n\r\n        </li>\r\n        {/* <h3>To do</h3>\r\n        <li>\r\n          To do: Filtrar en la grafica tripduration las estaciones con un\r\n          checkbox o algún desplegable\r\n        </li>\r\n        <li>\r\n          Cada vez que se seleccione algún nodo del mapa se debe mostrar la\r\n          cantidad de usuarios por genero que llegaron a la estación desde otras\r\n          y que tomaron el servicio desde ahí\r\n        </li>\r\n        <li>\r\n          Cada vez que se seleccione algún nodo del mapa se debe mostrar la\r\n          cantidad de usuarios por año que llegaron a la estación desde otras y\r\n          que tomaron el servicio desde ahí\r\n        </li> */}\r\n      </ul>\r\n      <Row>\r\n        <Col span={12}>\r\n          <Select\r\n            style={{ width: \"100px\" }}\r\n            defaultValue={0}\r\n            onChange={(e) => setMonth(e)}\r\n          >\r\n            <Select.Option key={0} value={0}>\r\n              2020-03\r\n            </Select.Option>\r\n            <Select.Option key={1} value={1}>\r\n              2020-03\r\n            </Select.Option>\r\n            <Select.Option key={2} value={2}>\r\n              2020-03\r\n            </Select.Option>\r\n          </Select>\r\n        </Col>\r\n        <Col span={12}>\r\n          <Upload\r\n            accept=\".json\"\r\n            showUploadList={true}\r\n            beforeUpload={(file) => {\r\n              const reader = new FileReader();\r\n              reader.onload = (e) => {\r\n                console.log(\"before upload\", JSON.parse(e.target.result));\r\n                const dataFile = JSON.parse(e.target.result);\r\n\r\n                message.success(\"Se han cargado los datos exitosamente\");\r\n                setData(deleteLargeTrips(dataFile));\r\n              };\r\n              reader.readAsText(file);\r\n\r\n              // Prevent upload\r\n              return false;\r\n            }}\r\n          >\r\n            <Button icon={<UploadOutlined />} shape=\"round\">\r\n              Subir datos (formato .json)\r\n            </Button>\r\n          </Upload>\r\n        </Col>\r\n      </Row>\r\n      <Divider type=\"vertical\" />\r\n      <Row gutter={[15, 15]}>\r\n        <Col span=\"7\">\r\n          <Rose data={average} filter={filterAmmout} />\r\n        </Col>\r\n        <Col span=\"17\">\r\n          <Row gutter={[15, 15]}>\r\n            <Col span=\"18\">\r\n              <BarChart\r\n                key=\"barchar\"\r\n                data={ammountsByDay.rows}\r\n                day={currentDay}\r\n                setNumberDay={setNumberDay}\r\n              />\r\n            </Col>\r\n            <Col span=\"6\">\r\n              <Card style={{ maxHeight: 96 }}>\r\n                <Statistic\r\n                  title=\"Hombres\"\r\n                  suffix={` dia: ${numberDay === true ? \"todos\" : numberDay}`}\r\n                  value={genders.male}\r\n                />\r\n              </Card>\r\n              <Card style={{ maxHeight: 96 }}>\r\n                <Statistic\r\n                  title=\"Mujeres\"\r\n                  suffix={` dia: ${numberDay === true ? \"todos\" : numberDay}`}\r\n                  value={genders.female}\r\n                />\r\n              </Card>\r\n              <Card style={{ maxHeight: 96 }}>\r\n                <Statistic\r\n                  title=\"Indefinido\"\r\n                  suffix={` dia: ${numberDay === true ? \"todos\" : numberDay}`}\r\n                  value={genders.undefined}\r\n                />\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Card style={{ minHeight: 150 }}>\r\n            <SmallChart data={ages} />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      {dataMap.placeArray && (\r\n        <Select\r\n          allowClear\r\n          style={{ width: \"100%\" }}\r\n          placeholder=\"Please select a station\"\r\n          showSearch\r\n          onChange={(e) => setsearchedStation(parseInt(e))}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n        >\r\n          {Object.keys(dataMap.placeArray).map((key) => (\r\n            <Select.Option key={dataMap.placeArray[key].name} value={key}>\r\n              {dataMap.placeArray[key].name}\r\n            </Select.Option>\r\n          ))}\r\n        </Select>\r\n      )}\r\n      <Row gutter={[10, 10]}>\r\n        <Col span=\"24\">\r\n          <Card bodyStyle={{ minHeight: 300 }}>\r\n            <Map\r\n              places={dataMap.placeArray}\r\n              lines={dataMap.edges}\r\n              edgeFilterProp={setEdgesFilter}\r\n              setCurrentStation={setCurrentStation}\r\n              searchedStation={searchedStation}\r\n            />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={[10, 10]}>\r\n        <Col span={8}>\r\n          <Card\r\n            title={`Duración de viaje promedio de ${currentStation} y otras estaciones`}\r\n            bodyStyle={{ minHeight: 300 }}\r\n          >\r\n            <TripDurationChart\r\n              data={formatArray(edgesFilter, currentStation)}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={8}>\r\n          <Card\r\n            title={`Duración de viaje vs cantidad de viajes`}\r\n            bodyStyle={{ minHeight: 300 }}\r\n          >\r\n            <Scatter dataProp={formatArray(edgesFilter, currentStation)} />\r\n          </Card>\r\n        </Col>\r\n        <Col span={8}>\r\n          <Card title=\"Cantidad de recorridos\" bodyStyle={{ minHeight: 300 }}>\r\n            <HorizontalBar data={formatArray(edgesFilter, currentStation)} />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default Citibike;\r\n","import React from \"react\";\r\nimport { Layout, Menu } from \"antd\";\r\nimport {\r\n  DashboardTwoTone,\r\n  UploadOutlined,\r\n  UserOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst { Sider } = Layout;\r\n\r\nconst customSider = ({ collapsed }) => {\r\n  return (\r\n    <Sider trigger={null} collapsible collapsed={collapsed}>\r\n      <div className=\"logo\" />\r\n      <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[\"1\"]}>\r\n        <Menu.Item key=\"1\" onClick={null}>\r\n          <Link to=\"/\">\r\n            <UserOutlined />\r\n            <span>introducción</span>\r\n          </Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"2\" onClick={null}>\r\n          <Link to=\"/citybike\">\r\n            <span>\r\n              <DashboardTwoTone /> <span>Dashboard citibyke </span>\r\n            </span>\r\n          </Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"3\" icon={<UploadOutlined />}>\r\n          nav 3\r\n        </Menu.Item>\r\n      </Menu>\r\n    </Sider>\r\n  );\r\n};\r\n\r\nexport default customSider;\r\n","import React from \"react\";\r\nimport \"./styles/sider.css\";\r\nimport Introduction from \"./views/Introduction\";\r\nimport Citybike from \"./views/Citybike\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport { Layout } from \"antd\";\r\nimport Sider from \"./components/general/Sider\";\r\nimport {\r\n  MenuUnfoldOutlined,\r\n  MenuFoldOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nconst { Header, Content } = Layout;\r\nconst Routes = () => {\r\n  const [collapsed, setCollapsed] = React.useState(false);\r\n\r\n  const Toggle = () => {\r\n    setCollapsed(!collapsed);\r\n  };\r\n\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <Layout>\r\n        <Sider collapsed={collapsed} />\r\n        <Layout className=\"site-layout\">\r\n          <Header className=\"site-layout-background\" style={{ padding: 0 }}>\r\n            {React.createElement(\r\n              collapsed ? MenuUnfoldOutlined : MenuFoldOutlined,\r\n              {\r\n                className: \"trigger\",\r\n                onClick: Toggle,\r\n              }\r\n            )}\r\n          </Header>\r\n          <Content\r\n            style={{\r\n              margin: \"15px 16px\",\r\n              padding: 20,\r\n              minHeight: 768,\r\n            }}\r\n          >\r\n            <Switch>\r\n              <Route exact path=\"/citybike\" component={Citybike} />\r\n              <Route exact path=\"/*\" component={Introduction} />\r\n            </Switch>\r\n          </Content>\r\n        </Layout>\r\n      </Layout>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Router from \"./Router\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <Router />\r\n  // </React.StrictMode>,\r\n  ,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}