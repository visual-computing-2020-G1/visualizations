{"version":3,"sources":["views/Introduction.js","components/charts/Bar.jsx","components/charts/Rose.jsx","utils/index.js","components/charts/map/Map.jsx","views/Citybike.jsx","components/general/Sider.js","Router.js","serviceWorker.js","index.js"],"names":["columns","title","dataIndex","key","tableData","name","type","option","description","listData","linkedin","github","email","Title","Text","Introduction","bordered","style","textAlign","orientation","size","dataSource","renderItem","item","Item","actions","href","Meta","marginTop","pagination","pageSize","scale","colors","Bar","data","day","React","useState","mounted","setMounted","useEffect","height","padding","forceFit","element-highlight","position","color","label","val","tooltip","value","Rose","filter","onClick","e","visible","showTitle","adjust","lineWidth","stroke","offset","getAmmountByDay","dictDay","results","nameObj","forEach","record","time","Date","starttime","getDate","undefined","typeDay","getDay","push","MapScene","places","lines","popupInfo","setPopupInfo","filterLine","setFilterLine","allLines","setAllLines","console","log","map","center","pitch","zoom","top","left","right","bottom","lnglat","feature","margin","input","output","blend","source","startName","endName","parser","coordinates","values","field","start","end","total","shape","active","opacity","animate","enable","trailLength","interval","duration","options","autoFit","confirmedCount","handler","args","lngLat","ds","DataSet","Citibike","createView","ammountsByDay","setAmmount","totals","result","element","count","nameDay","number","avergayByDayOfWeek","average","currentDay","setCurrentDay","dictEdges","place","coord","lat","long","nameStart","nameEnd","startCoord","endCoord","name0","checked","edges","names","split","startValue","endValue","startToEnd","endToStart","placeArray","i","namePlace","centroid","getPlaces","dataMap","gutter","span","dv","transform","callback","row","parseInt","rows","bodyStyle","minHeight","Sider","customSider","collapsed","trigger","collapsible","className","theme","mode","defaultSelectedKeys","to","UserOutlined","DashboardTwoTone","icon","UploadOutlined","Header","Content","Routes","setCollapsed","basename","process","createElement","MenuUnfoldOutlined","MenuFoldOutlined","exact","path","component","Citybike","Boolean","window","location","hostname","match","ReactDOM","render","Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.49704a62.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { Card, Typography, Table, Divider, List } from \"antd\";\r\n\r\nconst columns = [\r\n  { title: \"Nombre\", dataIndex: \"name\", key: \"name\" },\r\n  { title: \"Tipo\", dataIndex: \"type\", key: \"type\" },\r\n  { title: \"Opcional\", dataIndex: \"option\", key: \"option\" },\r\n  { title: \"Descripción\", dataIndex: \"description\", key: \"description\" },\r\n]\r\n\r\nconst tableData = [\r\n  {\r\n    key: 1,\r\n    name: \"tripduration\",\r\n    type: \"Integer\",\r\n    option: \"False\",\r\n    description: \"Duración del viaje en minutos\",\r\n  },\r\n  {\r\n    key: 2,\r\n    name: \"starttime\",\r\n    type: \"time\",\r\n    option: \"False\",\r\n    description: \"Fecha y hora del inicio del viaje\",\r\n  },\r\n  {\r\n    key: 3,\r\n    name: \"stoptime\",\r\n    type: \"time\",\r\n    option: \"False\",\r\n    description: \"Fecha y hora del fin del viaje\",\r\n  },\r\n  {\r\n    key: 4,\r\n    name: \"start station id\",\r\n    type: \"integer\",\r\n    option: \"False\",\r\n    description: \"id de la estación de inicio\",\r\n  },\r\n  {\r\n    key: 5,\r\n    name: \"start station name\",\r\n    type: \"String\",\r\n    option: \"False\",\r\n    description: \"Nombre de la estación de inicio\",\r\n  },\r\n  {\r\n    key: 6,\r\n    name: \"start station latitude\",\r\n    type: \"Float\",\r\n    option: \"False\",\r\n    description: \"Latitud de la estación de inicio\",\r\n  },\r\n  {\r\n    key: 7,\r\n    name: \"start station longitude\",\r\n    type: \"Float\",\r\n    option: \"False\",\r\n    description: \"Longitud de la estación de inicio\",\r\n  },\r\n  ,\r\n  {\r\n    key: 8,\r\n    name: \"end station id\",\r\n    type: \"Integer\",\r\n    option: \"False\",\r\n    description: \"Id de la estación de salida\",\r\n  },\r\n  {\r\n    key: 9,\r\n    name: \"end station name\",\r\n    type: \"String\",\r\n    option: \"False\",\r\n    description: \"Nombre de la estación de salida\",\r\n  },\r\n  {\r\n    key: 10,\r\n    name: \"end station latitude\",\r\n    type: \"float\",\r\n    option: \"False\",\r\n    description: \"Latitud de la estación de salida\",\r\n  },\r\n  {\r\n    key: 11,\r\n    name: \"end station longitude\",\r\n    type: \"Float\",\r\n    option: \"False\",\r\n    description: \"Longitud de la estación de salida\",\r\n  },\r\n  {\r\n    key: 12,\r\n    name: \"bikeid\",\r\n    type: \"Integer\",\r\n    option: \"true\",\r\n    description: \"id de la cicla\",\r\n  },\r\n  {\r\n    key: 13,\r\n    name: \"usertype\",\r\n    type: \"String\",\r\n    option: \"true\",\r\n    description: \"Tipo de usuario\",\r\n  },\r\n  {\r\n    key: 14,\r\n    name: \"birth year\",\r\n    type: \"Integer\",\r\n    option: \"true\",\r\n    description: \"Año de nacimiento del usuario\",\r\n  },\r\n  {\r\n    key: 15,\r\n    name: \"gender\",\r\n    type: \"binary\",\r\n    option: \"true\",\r\n    description: \"male/female\",\r\n  }\r\n];\r\n\r\n// start station longitude\",\"end station id\",\"end station name\",\"end station latitude\",\"end station longitude\",\"bikeid\",\"usertype\",\"birth year\",\"gender\"\r\n\r\nconst listData = [\r\n  {\r\n    name: \"Nicolás Parra Ramos\",\r\n    linkedin: \"https://www.linkedin.com/in/nicol%C3%A1s-parra-ramos-366910140/\",\r\n    github: \"https://github.com/NicolasPrr\",\r\n    email: \"niparrara@unal.edu.co\",\r\n  },\r\n  {\r\n    name: \"Johnathan Andrés León Rodriguez\",\r\n    linkedin: \"https://www.linkedin.com/\",\r\n    github: \"https://github.com/jaleonro\",\r\n    email: \"jaleonro@unal.edu.co\",\r\n  },\r\n];\r\nconst { Title, Text } = Typography;\r\n\r\nconst Introduction = () => {\r\n  return (\r\n    <Card bordered={false} style={{ textAlign: \"center\" }}>\r\n      <Title>Dashboard COMPUTACIÓN VISUAL 2020-1</Title>\r\n\r\n      <Divider orientation=\"left\">Integrantes </Divider>\r\n\r\n      <List\r\n        size=\"small\"\r\n        // bordered\r\n        dataSource={listData}\r\n        renderItem={(item) => (\r\n          <List.Item\r\n            actions={[\r\n              <a href={item.linkedin}> Linkedin</a>,\r\n              <a href={item.github}>Github</a>,\r\n            ]}\r\n          >\r\n            <div style={{ textAlign: \"left\" }}>\r\n              <List.Item.Meta title={item.name} description={item.email} />\r\n            </div>\r\n          </List.Item>\r\n        )}\r\n      />\r\n\r\n      <Divider orientation=\"left\">Descripción </Divider>\r\n      <Text>\r\n        La pagina muestra la visualización de los datos del sistema de\r\n        bicicletas de NY{\" \"}\r\n        <a href=\"https://www.citibikenyc.com/system-data\">CitiBike</a> más\r\n        especificamente los datos del mes marzo del 2020 encontrados{\" \"}\r\n        <a href=\"https://s3.amazonaws.com/tripdata/JC-202003-citibike-tripdata.csv.zip\">\r\n          aquí\r\n        </a>{\" \"}\r\n        cuya estructura de datos se presenta en la siguiente tabla.\r\n      </Text>\r\n      <div style={{ marginTop: \"2%\" }}>\r\n        <Table size=\"small\" dataSource={tableData} columns={columns} pagination={{pageSize: 20}} />\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Introduction;\r\n","import React from \"react\";\r\n\r\nimport { Card } from \"antd\";\r\n\r\nimport { Chart, Geom, Axis, Legend, Interval } from \"bizcharts\";\r\n\r\nconst scale = {};\r\nconst colors = [\r\n  \"#6395F9\",\r\n  \"#62DAAB\",\r\n  \"#657798\",\r\n  \"#F6C022\",\r\n  \"#E96C5B\",\r\n  \"#74CBED\",\r\n  \"#9967BD\",\r\n];\r\nconst Bar = ({ data, day }) => {\r\n  const [mounted, setMounted] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    // Actualiza el título del documento usando la API del navegador\r\n    setMounted(true);\r\n  }, [data]);\r\n\r\n  return (\r\n    <Card size=\"small\" title={`cantidad de recorridos por día-${day}`}>\r\n      {mounted && (\r\n        <Chart\r\n          data={data}\r\n          scale={scale}\r\n          height={400}\r\n          padding={30}\r\n          forceFit\r\n        >\r\n          {/* <Axis name=\"value\" /> */}\r\n          <Axis name=\"day\" />\r\n          <Geom\r\n          element-highlight\r\n            type=\"interval\"\r\n            position=\"day*value\"\r\n            color={[\r\n              \"type\",\r\n              (type) => {\r\n                return colors[type];\r\n              },\r\n            ]}\r\n            label={[\"value\", (val) => \"val\"]}\r\n            tooltip={[\r\n              \"day*value*type\",\r\n              (day, value, type) => {\r\n                // array\r\n                const dayName =\r\n                  type === 0\r\n                    ? \"L\"\r\n                    : type === 1\r\n                    ? \"M\"\r\n                    : type === 2\r\n                    ? \"W\"\r\n                    : type === 3\r\n                    ? \"J\"\r\n                    : type === 4\r\n                    ? \"V\"\r\n                    : type === 5\r\n                    ? \"S\"\r\n                    : \"D\";\r\n                return {\r\n                  //   title=\"day-value-name\",\r\n                  name: \"día del mes, recorrido, dia de la semana \",\r\n                  value: day + \"-\" + value + \"-\" + dayName,\r\n                };\r\n              },\r\n            ]}\r\n          >\r\n            <Legend position=\"right\" />\r\n          </Geom>\r\n        </Chart>\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\nexport default Bar;\r\n","import React from \"react\";\r\nimport { Card } from \"antd\";\r\n\r\nimport { Chart, Interval, Tooltip, Axis, Coordinate } from \"bizcharts\";\r\n\r\nconst Rose = ({ data, filter }) => {\r\n  const [mounted, setMounted] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    setMounted(true);\r\n  },[data]);\r\n\r\n  return (\r\n    <Card title=\"Promedio por día de la semana\" size=\"small\">\r\n      {mounted && (\r\n        <Chart\r\n          height={400}\r\n          data={data}\r\n          forceFit\r\n          onClick={(e) => filter(e)}\r\n          // onMouseDown={e => console.log(e)}\r\n        >\r\n          <Coordinate type=\"polar\" />\r\n          <Axis visible={true} />\r\n          <Tooltip showTitle={false} />\r\n          <Interval\r\n            position=\"name*value\"\r\n            adjust=\"stack\"\r\n            element-highlight\r\n            color=\"name\"\r\n            style={{\r\n              lineWidth: 1,\r\n              stroke: \"#fff\",\r\n            }}\r\n            label={[\r\n              \"name\",\r\n              {\r\n                offset: -15,\r\n              },\r\n            ]}\r\n          />\r\n        </Chart>\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\nexport default Rose;\r\n","export function getAmmountByDay(data) {\r\n  //All .json\r\n  let dictDay = {};\r\n  let results = [];\r\n  data.forEach((record) => {\r\n    const time = new Date(record.starttime);\r\n    const day = time.getDate();\r\n    if (dictDay[day] === undefined) {\r\n      const typeDay = time.getDay();\r\n      dictDay[day] = { value: 1, type: typeDay };\r\n    } else {\r\n      dictDay[day] = { ...dictDay[day], value: dictDay[day].value + 1 };\r\n    }\r\n  });\r\n  for (let nameObj in dictDay) {\r\n    results.push({\r\n      day: nameObj,\r\n      value: dictDay[nameObj].value,\r\n      type: dictDay[nameObj].type,\r\n    });\r\n  }\r\n  return results;\r\n}\r\n\r\nexport function avergayByDayOfWeek(data) {\r\n  /**\r\n   * data = [{value:100, day: 1, type:10}]\r\n   */\r\n  let totals = {};\r\n  let result = [];\r\n  data.forEach((element) => {\r\n    if (totals[element.type] === undefined) {\r\n      totals[element.type] = { count: 1, total: element.value };\r\n    } else {\r\n      totals[element.type] = {\r\n        count: totals[element.type].count + 1,\r\n        total: totals[element.type].total + element.value,\r\n      };\r\n    }\r\n  });\r\n  for (let nameObj in totals) {\r\n    const nameDay =\r\n      nameObj === \"0\"\r\n        ? \"L\"\r\n        : nameObj === \"1\"\r\n        ? \"M\"\r\n        : nameObj === \"2\"\r\n        ? \"W\"\r\n        : nameObj === \"3\"\r\n        ? \"J\"\r\n        : nameObj === \"4\"\r\n        ? \"V\"\r\n        : nameObj === \"5\"\r\n        ? \"S\"\r\n        : \"D\";\r\n    result.push({\r\n      name: nameDay,\r\n      value: totals[nameObj].total / totals[nameObj].count,\r\n      number: nameObj,\r\n    });\r\n  }\r\n  return result;\r\n}\r\nexport function getPlaces(data) {\r\n  /*\r\n  @data: array of all data\r\n  */\r\n  let places = {};\r\n  let lines = [];\r\n  let dictEdges = {};\r\n  data.forEach((record) => {\r\n    const place = record[\"start station name\"];\r\n    if (places[place] === undefined) {\r\n      const coord = {\r\n        lat: record[\"start station latitude\"],\r\n        long: record[\"start station longitude\"],\r\n      };\r\n      places[place] = { coord: { ...coord }, input: 1, output: 0 };\r\n    } else {\r\n      places[place] = { ...places[place], input: places[place].input + 1 };\r\n    }\r\n  });\r\n  data.forEach((record) => {\r\n    const place = record[\"end station name\"];\r\n    if (places[place] === undefined) {\r\n      const coord = {\r\n        lat: record[\"end station latitude\"],\r\n        long: record[\"end station longitude\"],\r\n      };\r\n      places[place] = { coord: { ...coord }, output: 1, input: 0 };\r\n    } else {\r\n      places[place] = { ...places[place], output: places[place].output + 1 };\r\n    }\r\n  });\r\n\r\n  data.forEach((record) => {\r\n    //pairvalues count\r\n    const nameStart = record[\"start station name\"];\r\n    const nameEnd = record[\"end station name\"];\r\n    const startCoord = {\r\n      lat: record[\"start station latitude\"],\r\n      long: record[\"start station longitude\"],\r\n    };\r\n    const endCoord = {\r\n      lat: record[\"end station latitude\"],\r\n      long: record[\"end station longitude\"],\r\n    };\r\n    const name0 = `${nameStart}|${nameEnd}`;\r\n    if (dictEdges[name0] === undefined) {\r\n      dictEdges[name0] = {\r\n        value: 1,\r\n        startCoord: startCoord,\r\n        endCoord: endCoord,\r\n        checked: false,\r\n      };\r\n    } else {\r\n      dictEdges[name0] = {\r\n        ...dictEdges[name0],\r\n        value: dictEdges[name0].value + 1,\r\n      };\r\n    }\r\n  });\r\n  console.log(dictEdges);\r\n  let edges = [];\r\n  for (let nameObj in dictEdges) {\r\n    const names = nameObj.split(\"|\");\r\n    const startCoord = dictEdges[`${names[0]}|${names[1]}`].startCoord;\r\n    const endCoord = dictEdges[`${names[0]}|${names[1]}`].endCoord;\r\n    const startValue = dictEdges[`${names[0]}|${names[1]}`].value;\r\n    const endValue =\r\n      dictEdges[`${names[1]}|${names[0]}`] === undefined\r\n        ? 0\r\n        : dictEdges[`${names[0]}|${names[1]}`].value;\r\n    edges.push({\r\n      coord: [\r\n        [startCoord.long, startCoord.lat],\r\n        [endCoord.long, endCoord.lat],\r\n      ],\r\n      startName: names[0],\r\n      endName: names[1],\r\n      startToEnd: startValue,\r\n      endToStart: endValue,\r\n    });\r\n  }\r\n  console.log(edges);\r\n  let placeArray = [];\r\n  let i = 0;\r\n  for (let namePlace in places) {\r\n    const lat = places[namePlace].coord.lat;\r\n    const long = places[namePlace].coord.long;\r\n    const input = places[namePlace].input;\r\n    const output = places[namePlace].output;\r\n    placeArray.push({\r\n      name: namePlace,\r\n      key: i,\r\n      centroid: [long * 1, lat * 1],\r\n      input: input,\r\n      output: output,\r\n    });\r\n    i++;\r\n  }\r\n  return {placeArray, edges};\r\n}\r\n// export { getAmmountByDay, avergayByDayOfWeek };\r\n","import {\r\n  AMapScene,\r\n  LineLayer,\r\n  LayerEvent,\r\n  MapboxScene,\r\n  Marker,\r\n  Control,\r\n  PointLayer,\r\n  Popup,\r\n} from \"@antv/l7-react\";\r\nimport * as React from \"react\";\r\n\r\n// const IMarkerOption= {}\r\nconst dataFlyTest = [\r\n  // {\r\n  //   coord: [\r\n  //     [-74.0337589, 40.7272235],\r\n  //     [-74.21105069962759, 4.285993532528952],\r\n  //   ],\r\n  // },\r\n  {\r\n    coord: [\r\n      [-74.0337589, 40.7272235],\r\n      [-74.044247311, 40.727595966],\r\n    ],\r\n    size: 3,\r\n    key: 1,\r\n  },\r\n  {\r\n    coord: [\r\n      [-74.06762212514877, 40.7253399253558],\r\n      [-74.0337589, 40.7272235],\r\n    ],\r\n    size: 4,\r\n    key: 2,\r\n  },\r\n];\r\nconst MapScene = React.memo(function Map({ places, lines }) {\r\n  // console.log(places);\r\n  const [popupInfo, setPopupInfo] = React.useState();\r\n  const [filterLine, setFilterLine] = React.useState(\"\");\r\n  const [allLines, setAllLines] = React.useState(true);\r\n\r\n  React.useEffect( () =>console.log(\"popup\", popupInfo) , [popupInfo])\r\n  function showPopup(args) {\r\n    console.log(args);\r\n    args.feature &&\r\n      setPopupInfo({\r\n        lnglat: args.lngLat,\r\n        feature: args.feature,\r\n      });\r\n    setAllLines(false);\r\n    setFilterLine(args.feature.name);\r\n  }\r\n  return (\r\n    <MapboxScene\r\n      map={{\r\n        center: [-74.044247311, 40.727595971],\r\n        pitch: 0,\r\n        style: \"dark\",\r\n        zoom: 13,\r\n      }}\r\n      style={{\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n      }}\r\n    >\r\n      <Control type=\"scale\" position=\"topleft\" />\r\n      <Control type=\"zoom\" position=\"topleft\" />\r\n      {popupInfo && (\r\n        <Popup lnglat={popupInfo.lnglat}>\r\n          {popupInfo.feature.name}\r\n          <ul\r\n            style={{\r\n              margin: 0,\r\n            }}\r\n          >\r\n            <li>Estación de inicio:{popupInfo.feature.input}</li>\r\n            <li>Estación final :{popupInfo.feature.output}</li>\r\n          </ul>\r\n        </Popup>\r\n      )}\r\n      <LineLayer\r\n        blend=\"normal\"\r\n        key={\"2\"}\r\n        source={{\r\n          data: lines.filter(\r\n            (val) =>\r\n              val.startName === filterLine ||\r\n              val.endName === filterLine ||\r\n              allLines\r\n          ),\r\n          parser: {\r\n            type: \"json\",\r\n            coordinates: \"coord\",\r\n            // key: \"key\",\r\n          },\r\n        }}\r\n        size={{\r\n          values: 1.2,\r\n        }}\r\n        color={{\r\n          field: \"startToEnd*endToStart\",\r\n          values: (start, end) => {\r\n            const total = start + end;\r\n            return total > 50\r\n              ? \"#914BF2\"\r\n              : total >= 40\r\n              ? \"#4BB2F2\"\r\n              : total >= 30\r\n              ? \"#8C0707\"\r\n              : total >= 20\r\n              ? \"#3C474B\"\r\n              : total >= 10\r\n              ? \"#162521\"\r\n              : \"#f5f5f5\";\r\n          },\r\n\r\n          // values: \"#8C1EB2\",\r\n        }}\r\n        shape={{\r\n          values: \"line\",\r\n        }}\r\n        active={{ option: true }}\r\n        style={{\r\n          opacity: 0.5,\r\n        }}\r\n        // animate={{\r\n        //   enable: false,\r\n        //   interval: 1,\r\n        //   trailLength: 1.5,\r\n        //   duration: 2,\r\n        //   speed: 3\r\n        // }}\r\n        animate={{\r\n          enable: true,\r\n          trailLength: 1.2,\r\n          interval: 0.5,\r\n          duration: 7,\r\n        }}\r\n      />\r\n      {/* <PointLayer/> */}\r\n      <PointLayer\r\n        key={\"3\"}\r\n        options={{\r\n          autoFit: true,\r\n        }}\r\n        source={{\r\n          data: places,\r\n          parser: {\r\n            type: \"json\",\r\n            coordinates: \"centroid\",\r\n          },\r\n        }}\r\n        scale={{\r\n          values: {\r\n            confirmedCount: {\r\n              type: \"log\",\r\n            },\r\n          },\r\n        }}\r\n        color={{\r\n          field: \"output\",\r\n          values: (val) => {\r\n            return val > 1000\r\n              ? \"#AD2310\"\r\n              : val > 700\r\n              ? \"#FF5F4A\"\r\n              : val > 500\r\n              ? \"#FA472F\"\r\n              : val > 300\r\n              ? \"#2FFA97\"\r\n              : \"#00AD58\";\r\n          },\r\n        }}\r\n        shape={{\r\n          // values: \"circle\"\r\n          values: \"hexagon\",\r\n          // values: \"circle\"\r\n        }}\r\n        active={{\r\n          option: {\r\n            color: \"#0c2c84\",\r\n          },\r\n        }}\r\n        size={{\r\n          field: \"input\",\r\n          values: [10, 25],\r\n        }}\r\n        animate={{\r\n          enable: false,\r\n        }}\r\n        style={{\r\n          opacity: 0.8,\r\n        }}\r\n      >\r\n        {/* <LayerEvent type=\"click\" handler={e => console.log(e)} /> */}\r\n        <LayerEvent type=\"click\" handler={(e) => showPopup(e)} />\r\n      </PointLayer>\r\n      \r\n        {/* <LayerEvent type=\"click\" handler={(e) => alert(\"hey\")} /> */}\r\n    </MapboxScene>\r\n  );\r\n});\r\n\r\nexport default MapScene;\r\n","import React from \"react\";\r\nimport { Row, Col, Card } from \"antd\";\r\nimport BarChart from \"../components/charts/Bar\";\r\nimport Rose from \"../components/charts/Rose\";\r\nimport { avergayByDayOfWeek, getAmmountByDay, getPlaces } from \"../utils\";\r\nimport data from \"../data/citybike/bike_2020_03-.json\";\r\nimport Map from '../components/charts/map/Map'\r\nimport DataSet from \"@antv/data-set\";\r\n\r\nconst ds = new DataSet();\r\nconst Citibike = () => {\r\n  const [ammountsByDay, setAmmount] = React.useState(\r\n    ds.createView().source(getAmmountByDay(data))\r\n  );\r\n  const [average, setAverage] = React.useState(\r\n    avergayByDayOfWeek(getAmmountByDay(data))\r\n  );\r\n  const [currentDay, setCurrentDay] = React.useState(\"All\");\r\n  \r\n  function resetBar() {\r\n    setAmmount(ds.createView().source(getAmmountByDay(data)));\r\n  }\r\n  const [dataMap, setDataMap] = React.useState(getPlaces(data));\r\n\r\n  function filterAmmout(e) {\r\n    if (e.data === null || e.data === undefined) {\r\n      resetBar();\r\n      setCurrentDay(\"All\");\r\n    } else {\r\n      if (e.data.data !== undefined) {\r\n        const dv = ds.createView().source(getAmmountByDay(data));\r\n        dv.transform({\r\n          type: \"filter\",\r\n          callback(row) {\r\n            return row.type === parseInt(e.data.data.number);\r\n          },\r\n        });\r\n        setAmmount(dv);\r\n        setCurrentDay(e.data.data.name);\r\n      }\r\n    }\r\n  }\r\n  // console.log(getPlaces(data))\r\n  return (\r\n    <div>\r\n      <ul>\r\n        <li>\r\n          Para resetear el grafico de barras se debe dar click en un espacio en blanco en el grafico de promedio por día de la semana.\r\n        </li>\r\n      </ul>\r\n      <Row gutter={[15, 15]}>\r\n        <Col span=\"12\">\r\n          <Rose data={average} filter={filterAmmout} />\r\n        </Col>\r\n        <Col span=\"12\">\r\n          <BarChart key=\"barchar\" data={ammountsByDay.rows} day={currentDay} />\r\n        </Col>\r\n      </Row>\r\n      <Card bodyStyle={{minHeight: 800}}>\r\n      <Map places = {dataMap.placeArray} lines = {dataMap.edges} />\r\n\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\nexport default Citibike;\r\n","import React from \"react\";\r\nimport { Layout, Menu } from \"antd\";\r\nimport {\r\n  DashboardTwoTone,\r\n  UploadOutlined,\r\n  UserOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst { Sider } = Layout;\r\n\r\nconst customSider = ({ collapsed }) => {\r\n  return (\r\n    <Sider trigger={null} collapsible collapsed={collapsed}>\r\n      <div className=\"logo\" />\r\n      <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[\"1\"]}>\r\n        <Menu.Item key=\"1\" onClick={null}>\r\n          <Link to=\"/\">\r\n            <UserOutlined />\r\n            <span>introducción</span>\r\n          </Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"2\" onClick={null}>\r\n          <Link to=\"/citybike\">\r\n            <span>\r\n              <DashboardTwoTone /> <span>Dashboard citibyke </span>\r\n            </span>\r\n          </Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"3\" icon={<UploadOutlined />}>\r\n          nav 3\r\n        </Menu.Item>\r\n      </Menu>\r\n    </Sider>\r\n  );\r\n};\r\n\r\nexport default customSider;\r\n","import React from \"react\";\r\nimport \"./styles/sider.css\";\r\nimport Introduction from \"./views/Introduction\";\r\nimport Citybike from \"./views/Citybike\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport { Layout } from \"antd\";\r\nimport Sider from \"./components/general/Sider\";\r\nimport {\r\n  MenuUnfoldOutlined,\r\n  MenuFoldOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nconst { Header, Content } = Layout;\r\nconst Routes = () => {\r\n  const [collapsed, setCollapsed] = React.useState(false);\r\n\r\n  const Toggle = () => {\r\n    setCollapsed(!collapsed);\r\n  };\r\n\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <Layout>\r\n        <Sider collapsed={collapsed} />\r\n        <Layout className=\"site-layout\">\r\n          <Header className=\"site-layout-background\" style={{ padding: 0 }}>\r\n            {React.createElement(\r\n              collapsed ? MenuUnfoldOutlined : MenuFoldOutlined,\r\n              {\r\n                className: \"trigger\",\r\n                onClick: Toggle,\r\n              }\r\n            )}\r\n          </Header>\r\n          <Content\r\n            style={{\r\n              margin: \"15px 16px\",\r\n              padding: 20,\r\n              minHeight: 768,\r\n            }}\r\n          >\r\n            <Switch>\r\n              <Route exact path=\"/citybike\" component={Citybike} />\r\n              <Route exact path=\"/*\" component={Introduction} />\r\n            </Switch>\r\n          </Content>\r\n        </Layout>\r\n      </Layout>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Router from \"./Router\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <Router />\r\n  // </React.StrictMode>,\r\n  ,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}